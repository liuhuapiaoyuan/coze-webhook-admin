This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-10T06:43:16.890Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.cursorrules
.dockerignore
.env.template
.gitignore
.repomixignore
.windsurfrules
components.json
docker/.env.template
docker/docker-compose.yml
docker/Dockerfile
docker/release.sh
docker/start.sh
docs/架构-CRUD.md
docs/最佳实践/class-transformer-1.md
docs/最佳实践/class-transformer-2.md
docs/rules/crud.rules.md
docs/server-ui/page-list.md
docs/server-ui/page-table.md
docs/shared-ui/smart-pagination.md
eslint.config.mjs
global.d.ts
next.config.ts
package.json
patches/@elysiajs__swagger@1.2.0.patch
postcss.config.mjs
prettier.config.mjs
prisma/schema.prisma
README.MD
repomix.config.json
src/api/index.ts
src/api/lib/json.bigint.ts
src/api/middlewares/auth.ts
src/app/admin/admins/_components/admin-form.tsx
src/app/admin/admins/[id]/loading.tsx
src/app/admin/admins/[id]/page.tsx
src/app/admin/admins/actions.ts
src/app/admin/admins/columns.tsx
src/app/admin/admins/new/loading.tsx
src/app/admin/admins/new/page.tsx
src/app/admin/admins/page.tsx
src/app/admin/api-endpoints/_components/basic-info.tsx
src/app/admin/api-endpoints/_components/detail-tabs.tsx
src/app/admin/api-endpoints/_components/form.tsx
src/app/admin/api-endpoints/_components/keys-list.tsx
src/app/admin/api-endpoints/_components/records-list.tsx
src/app/admin/api-endpoints/[id]/detail/page.tsx
src/app/admin/api-endpoints/[id]/page.tsx
src/app/admin/api-endpoints/actions.ts
src/app/admin/api-endpoints/columns.tsx
src/app/admin/api-endpoints/new/page.tsx
src/app/admin/api-endpoints/page.tsx
src/app/admin/api-keys/_components/form.tsx
src/app/admin/api-keys/[id]/page.tsx
src/app/admin/api-keys/actions.ts
src/app/admin/api-keys/columns.tsx
src/app/admin/api-keys/new/page.tsx
src/app/admin/api-keys/page.tsx
src/app/admin/api-logs/[id]/page.tsx
src/app/admin/api-logs/actions.ts
src/app/admin/api-logs/columns.tsx
src/app/admin/api-logs/page.tsx
src/app/admin/dashboard/_components/new-users.tsx
src/app/admin/dashboard/_components/welcome.tsx
src/app/admin/dashboard/page.tsx
src/app/admin/layout.tsx
src/app/admin/loading.tsx
src/app/admin/menus/_components/menu-form.tsx
src/app/admin/menus/_components/remove-button.tsx
src/app/admin/menus/[id]/page.tsx
src/app/admin/menus/actions.ts
src/app/admin/menus/columns.tsx
src/app/admin/menus/new/page.tsx
src/app/admin/menus/page.tsx
src/app/admin/permissions/_components/permission-form.tsx
src/app/admin/permissions/_components/permission-select.tsx
src/app/admin/permissions/_components/remove-button.tsx
src/app/admin/permissions/_components/schema.ts
src/app/admin/permissions/[id]/page.tsx
src/app/admin/permissions/actions.ts
src/app/admin/permissions/columns.tsx
src/app/admin/permissions/new/drawer.tsx
src/app/admin/permissions/new/page.tsx
src/app/admin/permissions/page.tsx
src/app/admin/profile/_components/form.tsx
src/app/admin/profile/actions.ts
src/app/admin/profile/loading.tsx
src/app/admin/profile/page.tsx
src/app/admin/roles/_components/remove-button.tsx
src/app/admin/roles/_components/role-form.tsx
src/app/admin/roles/[id]/page.tsx
src/app/admin/roles/actions.ts
src/app/admin/roles/columns.tsx
src/app/admin/roles/new/page.tsx
src/app/admin/roles/page.tsx
src/app/admin/webhooks/_components/form.tsx
src/app/admin/webhooks/[id]/page.tsx
src/app/admin/webhooks/actions.ts
src/app/admin/webhooks/columns.tsx
src/app/admin/webhooks/new/page.tsx
src/app/admin/webhooks/page.tsx
src/app/api/[[...slugs]]/route.ts
src/app/api/[api_id]/route.ts
src/app/api/admin/api-endpoints/[id]/keys/route.ts
src/app/api/auth/[...nextauth]/route.ts
src/app/api/v1/chat/completion/route.ts
src/app/api/v1/chat/completion/schema.ts
src/app/global.css
src/app/layout.tsx
src/app/login/page.tsx
src/app/not-found.tsx
src/app/page.tsx
src/app/webhook/[id]/route.ts
src/app/webhook/lib.ts
src/components/app-actions.tsx
src/components/app-sidebar.tsx
src/components/auth/login-form.tsx
src/components/devices/header.tsx
src/components/devices/list.tsx
src/components/landing/features.tsx
src/components/landing/hero.tsx
src/components/landing/nav.tsx
src/components/page-list.tsx
src/components/page-table.tsx
src/components/quick-link.tsx
src/components/remove-button.tsx
src/components/search-form.tsx
src/components/shared/data-table.tsx
src/components/shared/smart-pagination.tsx
src/components/shared/tree-view.tsx
src/components/skeleton/form.tsx
src/components/skeleton/table.tsx
src/components/theme-provider.tsx
src/components/theme-toggle.tsx
src/components/user-bar.tsx
src/hooks/use-mobile.tsx
src/hooks/use-toast.ts
src/instrumentation.ts
src/lib/auth.base.ts
src/lib/auth.ts
src/lib/cache.ts
src/lib/db.ts
src/lib/upload.ts
src/lib/utils.ts
src/lib/validations/auth.ts
src/lib/validations/device.ts
src/middleware.ts
src/service/admin.service.ts
src/service/api-endpoints.service.ts
src/service/coze-webhook.ts
src/service/enum/ADMIN_ROLE.ts
src/service/menu.service.ts
src/service/permission.service.ts
src/service/role.service.ts
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: .cursorrules
================
You are an expert senior software engineer specializing in modern web development, with deep expertise in TypeScript, React 19, Next.js 15 (App Router), Vercel AI SDK, Shadcn UI, Radix UI, and Tailwind CSS. You are thoughtful, precise, and focus on delivering high-quality, maintainable solutions.

## Analysis Process

Before responding to any request, follow these steps:

1. Request Analysis

   - Determine task type (code creation, debugging, architecture, etc.)
   - Identify languages and frameworks involved
   - Note explicit and implicit requirements
   - Define core problem and desired outcome
   - Consider project context and constraints

2. Solution Planning

   - Break down the solution into logical steps
   - Consider modularity and reusability
   - Identify necessary files and dependencies
   - Evaluate alternative approaches
   - Plan for testing and validation

3. Implementation Strategy
   - Choose appropriate design patterns
   - Consider performance implications
   - Plan for error handling and edge cases
   - Ensure accessibility compliance
   - Verify best practices alignment

## Code Style and Structure

### General Principles

- Write concise, readable TypeScript code
- Use functional and declarative programming patterns
- Follow DRY (Don't Repeat Yourself) principle
- Implement early returns for better readability
- Structure components logically: exports, subcomponents, helpers, types

### Naming Conventions

- Use descriptive names with auxiliary verbs (isLoading, hasError)
- Prefix event handlers with "handle" (handleClick, handleSubmit)
- Use lowercase with dashes for directories (components/auth-wizard)
- Favor named exports for components

### TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types
- Avoid enums; use const maps instead
- Implement proper type safety and inference
- Use `satisfies` operator for type validation

## React 19 and Next.js 15 Best Practices

### Component Architecture

- Favor React Server Components (RSC) where possible
- Minimize 'use client' directives
- Implement proper error boundaries
- Use Suspense for async operations
- Optimize for performance and Web Vitals

### State Management

- Use `useActionState` instead of deprecated `useFormState`
- Leverage enhanced `useFormStatus` with new properties (data, method, action)
- Implement URL state management with 'nuqs'
- Minimize client-side state

### Async Request APIs

```typescript
// Always use async versions of runtime APIs
const cookieStore = await cookies();
const headersList = await headers();
const { isEnabled } = await draftMode();

// Handle async params in layouts/pages
const params = await props.params;
const searchParams = await props.searchParams;
```

### Data Fetching

- Fetch requests are no longer cached by default
- Use `cache: 'force-cache'` for specific cached requests
- Implement `fetchCache = 'default-cache'` for layout/page-level caching
- Use appropriate fetching methods (Server Components, SWR, React Query)

### Route Handlers

```typescript
// Cached route handler example
export const dynamic = "force-static";

export async function GET(request: Request) {
  const params = await request.params;
  // Implementation
}
```

## Vercel AI SDK Integration

### Core Concepts

- Use the AI SDK for building AI-powered streaming text and chat UIs
- Leverage three main packages:
  1. `ai` - Core functionality and streaming utilities
  2. `@ai-sdk/[provider]` - Model provider integrations (e.g., OpenAI)
  3. React hooks for UI components

### Route Handler Setup

```typescript
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = await streamText({
    model: openai("gpt-4-turbo"),
    messages,
    tools: {
      // Tool definitions
    },
  });

  return result.toDataStreamResponse();
}
```

### Chat UI Implementation

```typescript
'use client';

import { useChat } from 'ai/react';

export default function Chat() {
  const { messages, input, handleInputChange, handleSubmit } = useChat({
    maxSteps: 5, // Enable multi-step interactions
  });

  return (
    <div className="flex flex-col w-full max-w-md py-24 mx-auto stretch">
      {messages.map(m => (
        <div key={m.id} className="whitespace-pre-wrap">
          {m.role === 'user' ? 'User: ' : 'AI: '}
          {m.toolInvocations ? (
            <pre>{JSON.stringify(m.toolInvocations, null, 2)}</pre>
          ) : (
            m.content
          )}
        </div>
      ))}

      <form onSubmit={handleSubmit}>
        <input
          className="fixed bottom-0 w-full max-w-md p-2 mb-8 border border-gray-300 rounded shadow-xl"
          value={input}
          placeholder="Say something..."
          onChange={handleInputChange}
        />
      </form>
    </div>
  );
}
```

## UI Development

### Styling

- Use Tailwind CSS with a mobile-first approach
- Implement Shadcn UI and Radix UI components
- Follow consistent spacing and layout patterns
- Ensure responsive design across breakpoints
- Use CSS variables for theme customization

### Accessibility

- Implement proper ARIA attributes
- Ensure keyboard navigation
- Provide appropriate alt text
- Follow WCAG 2.1 guidelines
- Test with screen readers

### Performance

- Optimize images (WebP, sizing, lazy loading)
- Implement code splitting
- Use `next/font` for font optimization
- Configure `staleTimes` for client-side router cache
- Monitor Core Web Vitals

## Configuration

### Next.js Config

```typescript
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Stable features (formerly experimental)
  bundlePagesRouterDependencies: true,
  serverExternalPackages: ["package-name"],

  // Router cache configuration
  experimental: {
    staleTimes: {
      dynamic: 30,
      static: 180,
    },
  },
};
```

### TypeScript Config

```json
{
  "compilerOptions": {
    "strict": true,
    "target": "ES2022",
    "lib": ["dom", "dom.iterable", "esnext"],
    "jsx": "preserve",
    "module": "esnext",
    "moduleResolution": "bundler",
    "noEmit": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
```

## Testing and Validation

### Code Quality

- Implement comprehensive error handling
- Write maintainable, self-documenting code
- Follow security best practices
- Ensure proper type coverage
- Use ESLint and Prettier

Remember: Prioritize clarity and maintainability while delivering robust, accessible, and performant solutions aligned with the latest React 19, Next.js 15, and Vercel AI SDK features and best practices.

================
File: .dockerignore
================
# Dependencies
packages
node_modules
.pnp
.pnp.js

# Testing
coverage

# Next.js
.next/
out/

# Production
build

# Misc
.DS_Store
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Local env files
.env*.local

# Vercel
.vercel

# TypeScript
*.tsbuildinfo
next-env.d.ts

# IDEs and editors
.idea
.vscode
*.swp
*.swo

# OS generated
Thumbs.db

================
File: .env.template
================
AUTH_SECRET="orpsHWZ8FKc3475/ivKpXRQ+BN8RT8f00QHDoBpmcqw=" # Added by `npx auth`. Read more: https://cli.authjs.dev

DATABASE_URL="file:./dev.db"

NEXT_PUBLIC_API_URL="http://localhost:3000"

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*
!.env.template

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# database
*.db
dev.db

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/
src/components/ui/*

================
File: .windsurfrules
================
You are an expert senior software engineer specializing in modern web development, with deep expertise in TypeScript, React 19, Next.js 15 (App Router), Vercel AI SDK, Shadcn UI, Radix UI, and Tailwind CSS. You are thoughtful, precise, and focus on delivering high-quality, maintainable solutions.

## Analysis Process

Before responding to any request, follow these steps:

1. Request Analysis

   - Determine task type (code creation, debugging, architecture, etc.)
   - Identify languages and frameworks involved
   - Note explicit and implicit requirements
   - Define core problem and desired outcome
   - Consider project context and constraints

2. Solution Planning

   - Break down the solution into logical steps
   - Consider modularity and reusability
   - Identify necessary files and dependencies
   - Evaluate alternative approaches
   - Plan for testing and validation

3. Implementation Strategy
   - Choose appropriate design patterns
   - Consider performance implications
   - Plan for error handling and edge cases
   - Ensure accessibility compliance
   - Verify best practices alignment

## Code Style and Structure

### General Principles

- Write concise, readable TypeScript code
- Use functional and declarative programming patterns
- Follow DRY (Don't Repeat Yourself) principle
- Implement early returns for better readability
- Structure components logically: exports, subcomponents, helpers, types

### Naming Conventions

- Use descriptive names with auxiliary verbs (isLoading, hasError)
- Prefix event handlers with "handle" (handleClick, handleSubmit)
- Use lowercase with dashes for directories (components/auth-wizard)
- Favor named exports for components

### TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types
- Avoid enums; use const maps instead
- Implement proper type safety and inference
- Use `satisfies` operator for type validation

## React 19 and Next.js 15 Best Practices

### Component Architecture

- Favor React Server Components (RSC) where possible
- Minimize 'use client' directives
- Implement proper error boundaries
- Use Suspense for async operations
- Optimize for performance and Web Vitals

### State Management

- Use `useActionState` instead of deprecated `useFormState`
- Leverage enhanced `useFormStatus` with new properties (data, method, action)
- Implement URL state management with 'nuqs'
- Minimize client-side state

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/global.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: docker/.env.template
================
AUTH_SECRET="orpsHWZ8FKc3475/ivKpXRQ+BN8RT8f00QHDoBpmcqw=" # Added by `npx auth`. Read more: https://cli.authjs.dev

DATABASE_URL="file:./dev.db"

================
File: docker/docker-compose.yml
================
version: "3"

services:
  ai-human:
    image: liuhuapiaoyuan/ai-human
    ports:
      - "8124:3000"
    env_file:
      - ./.env

================
File: docker/Dockerfile
================
FROM node:22-alpine AS base

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable
COPY . /app
WORKDIR /app

FROM base AS builder
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
COPY  ./next.docker.ts  ./next.config.ts
RUN pnpm run build


# 创建运行环境
FROM base as runtime
# 设置工作目录
WORKDIR /app

ENV NODE_ENV=production

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

COPY --from=builder /app/public ./public
# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

 


EXPOSE 3000
ENV PORT 3000


CMD ["node", "server.js"]

================
File: docker/release.sh
================
#!/bin/bash



# 使脚本在遇到任何错误时自动退出
set -e

# 定义一个错误处理函数
error_handler() {
    local exit_code=$?
    local line_no=$1
    echo "Error on line $line_no. Exit code: $exit_code"
    exit $exit_code
}

# 使用trap命令捕获错误并调用错误处理函数
trap 'error_handler $LINENO' ERR


VERSION=$(date +%Y%m%d%H%M)
BACK_IMAGE_NAME=liuhuapiaoyuan/ai-human
# 编译后端
echo "Building backend..."
docker build -f ./docker/Dockerfile  -t $BACK_IMAGE_NAME:latest -t $BACK_IMAGE_NAME:$VERSION .
 
echo "Build complete."


echo "Pushing images to Docker Hub..."

docker push $BACK_IMAGE_NAME:latest
docker push $BACK_IMAGE_NAME:$VERSION

 
echo "Push complete."

================
File: docker/start.sh
================
docker-compose -p ai-human pull
docker-compose -p ai-human down
docker-compose -p ai-human up -d

================
File: docs/架构-CRUD.md
================
完整的CURD创建流程:

1. 创建prisma.schema

2. 创建 service/model.service.ts

3. 创建 page/(admin)/actions.ts

4. 创建页面 page/(admin)/page.tsx

5. 创建新增页面 page/(admin)/new/page.tsx

6. 创建编辑页面 page/(admin)/[id]/page.tsx

7. 创建表单组件 page/(admin)/\_components/form.tsx

================
File: docs/最佳实践/class-transformer-1.md
================
### 使用 `@Transform` 装饰器实现自定义转换：实现存储跟业务对象的转换

在 TypeScript 项目中，我们经常需要对数据进行某些自定义转换，特别是在处理外部数据（例如 API 请求的响应）和业务逻辑层的数据之间的转换时。`class-transformer` 库提供了一个非常实用的工具——`@Transform` 装饰器，它使得我们能够方便地实现自定义的字段转换。

本文将介绍如何利用 `@Transform` 装饰器将一个逗号分隔的字符串转换为一个字符串数组，并通过实际示例展示如何在业务对象中使用这种转换。

### 问题背景

假设我们有一个 `UserBase` 类，它包含了一个字段 `tags`，这是一个以逗号分隔的字符串。在我们的业务对象 `User` 中，`tags` 需要是一个字符串数组。因此，在从数据库或 API 接收数据时，我们需要将这个逗号分隔的字符串转化为一个数组。通过使用 `class-transformer` 提供的 `@Transform` 装饰器，我们可以轻松实现这一点。

### 解决方案

`class-transformer` 提供了 `@Transform` 装饰器，可以用来为字段定义自定义的转换逻辑。我们将为 `tags` 字段创建一个转换函数，该函数会将逗号分隔的字符串转化为字符串数组。

### 步骤

1. 使用 `@Transform` 装饰器来处理字段的转换。
2. 编写一个函数来将逗号分隔的字符串转换为字符串数组。
3. 使用 `plainToClass` 来进行对象转换。

### 代码实现

```typescript
import { plainToClass, Transform } from "class-transformer";

// 原始类，tags 是一个逗号分隔的字符串
class UserBase {
  tags: string;
}

// 改进后的类，tags 是一个字符串数组
class User {
  @Transform(({ value }) => value.split(","), { toClassOnly: true }) // 将字符串转换为数组
  tags: string[];

  constructor(tags: string[]) {
    this.tags = tags;
  }
}

// 用户传入的数据是一个字符串，其中 tags 是逗号分隔的
const userBaseObj = {
  tags: "tag1,tag2,tag3",
};

// 使用 plainToClass 来进行转换
const user = plainToClass(User, userBaseObj);

console.log(user instanceof User); // true
console.log(user.tags); // ["tag1", "tag2", "tag3"]
```

### 解析

1. **原始类 `UserBase`**：
   `UserBase` 类中定义了一个字段 `tags`，它是一个简单的逗号分隔字符串。在实际的应用中，类似的字段可能来自于数据库或者外部 API 的响应。

2. **目标类 `User`**：
   `User` 类中的 `tags` 字段定义为一个字符串数组。我们通过使用 `@Transform` 装饰器来实现从字符串到数组的转换。

3. **`@Transform` 装饰器**：
   `@Transform` 装饰器的第一个参数是一个函数，这个函数接收一个对象作为参数，其中包含了原始字段的值。我们利用 `split(',')` 方法将逗号分隔的字符串转换为一个字符串数组。

   `toClassOnly: true` 的配置表示这个转换只会在 `plainToClass` 时生效，即将普通对象转换为类实例时，而不会影响反向转换（即类实例转换为普通对象时）。

4. **转换过程**：
   当我们调用 `plainToClass` 方法时，`tags` 字段会从字符串 `"tag1,tag2,tag3"` 转换为数组 `["tag1", "tag2", "tag3"]`，这样我们就得到了符合业务需求的 `User` 类实例。

### 小结

通过使用 `class-transformer` 提供的 `@Transform` 装饰器，我们能够灵活地进行字段的类型转换，尤其是在需要对字段进行一些特定处理（例如将逗号分隔的字符串转换为数组）时。这种方式不仅简化了代码的维护，还能帮助我们在 ORM 对象和业务对象之间进行高效的转换。

### 实际应用场景

这种转换方式在实际开发中非常有用，特别是在与数据库或外部 API 交互时。举个例子，假设我们使用 Prisma ORM 进行数据库操作，并且需要将数据库中的字符串字段（如 `tags`）转换为业务对象中的数组字段，这时 `@Transform` 装饰器就能非常方便地帮助我们实现这种需求。

总的来说，`class-transformer` 提供了非常强大且灵活的功能，能够让开发者轻松处理复杂的数据转换逻辑。

================
File: docs/最佳实践/class-transformer-2.md
================
### 扩展：反序列化将 `User` 转换为 `UserBase`

在上一篇文章中，我们演示了如何使用 `@Transform` 装饰器将逗号分隔的字符串转换为字符串数组。接下来，我们将扩展该示例，展示如何在反序列化时，将一个 `User` 类实例转换回 `UserBase` 类实例，尤其是当 `User` 类中的字段是数组时，我们希望将其转换为逗号分隔的字符串。

在实际开发中，我们常常需要在不同的层之间进行数据转换。例如，可能有一个与数据库或 API 交互的原始数据对象（`UserBase`），以及一个业务逻辑层的数据对象（`User`）。这时，我们需要进行双向转换——从原始数据对象到业务对象（序列化），以及从业务对象到原始数据对象（反序列化）。通过 `class-transformer` 提供的 `@Transform` 装饰器和 `toClassOnly` 选项，我们可以灵活地实现这种双向转换。

### 反序列化：将 `User` 转换为 `UserBase`

假设我们在反序列化时需要将 `User` 类的 `tags` 字段从字符串数组转换回逗号分隔的字符串。为了实现这一点，我们同样使用 `@Transform` 装饰器，只是这次是将数组转换回字符串。

### 代码实现

```typescript
import { plainToClass, classToPlain, Transform } from "class-transformer";

// 原始类，tags 是一个逗号分隔的字符串
class UserBase {
  tags: string;
}

// 改进后的类，tags 是一个字符串数组
class User {
  @Transform(({ value }) => value.split(","), { toClassOnly: true }) // 将字符串转换为数组
  @Transform(({ value }) => value.join(","), { toPlainOnly: true }) // 将数组转换为逗号分隔的字符串
  tags: string[];

  constructor(tags: string[]) {
    this.tags = tags;
  }
}

// 用户传入的数据是一个字符串，其中 tags 是逗号分隔的
const userBaseObj = {
  tags: "tag1,tag2,tag3",
};

// 使用 plainToClass 来进行转换
const user = plainToClass(User, userBaseObj);

console.log(user instanceof User); // true
console.log(user.tags); // ["tag1", "tag2", "tag3"]

// 将 User 实例转换回 UserBase
const userBaseObjFromUser = classToPlain(user);
console.log(userBaseObjFromUser); // { tags: 'tag1,tag2,tag3' }
```

### 解析

1. **`User` 类中的 `tags` 字段**：
   在 `User` 类中，`tags` 字段定义为一个字符串数组。我们在该字段上使用了两个 `@Transform` 装饰器：

   - 第一个装饰器将逗号分隔的字符串（如 `'tag1,tag2,tag3'`）转换为字符串数组。
   - 第二个装饰器则是反向转换，它将字符串数组转换回逗号分隔的字符串。这个转换函数使用 `join(',')` 方法将数组中的元素连接成一个字符串。

2. **序列化（`plainToClass`）**：
   在序列化过程中，我们将原始数据对象（`userBaseObj`）转换为 `User` 类实例。此时，`tags` 字段会被转换为数组 `["tag1", "tag2", "tag3"]`。

3. **反序列化（`classToPlain`）**：
   在反序列化过程中，我们将 `User` 类实例（`user`）转换回普通的对象。此时，`tags` 字段会被转换回逗号分隔的字符串 `'tag1,tag2,tag3'`。

   `toPlainOnly: true` 表示这个转换只会在从类实例转换回普通对象时生效，而不会在将普通对象转换为类实例时进行。这可以确保我们在 `classToPlain` 时进行转换，而在 `plainToClass` 时不做修改。

### 小结

通过使用 `@Transform` 装饰器，我们不仅可以轻松地将逗号分隔的字符串转换为字符串数组，还可以在反向转换时将字符串数组转换回逗号分隔的字符串。这使得我们能够在不同的数据表示（例如数据库存储格式和业务逻辑层的格式）之间进行灵活转换。

这种方式不仅能简化数据的转换逻辑，还能保证在整个应用中保持一致的处理方式，尤其适用于在 ORM 对象与业务对象之间的转换。例如，使用 Prisma ORM 时，我们可以通过这种方式实现字段类型的转换，使得我们在操作数据时能够避免手动转换的繁琐。

这种灵活的转换方式，使得我们在进行数据的序列化和反序列化时，能够更加简洁和高效。

================
File: docs/rules/crud.rules.md
================
1. 创建完整的CRUD架构如下：

- 创建 /admin/{module}/page.tsx
  import { getAdmins } from "./actions";
  import { columns } from "./columns";
  import { Button } from "@/components/ui/button";
  import { Plus } from "lucide-react";
  import Link from "next/link";
  import PageTable from "@/components/page-table";

export default async function AdminsPage(props: PageProps) {
return (

<div className="container mx-auto py-10">
<div className="mb-6 flex items-center justify-between">
<h1 className="text-2xl font-bold">管理员管理</h1>
<Link href="/admins/new">
<Button>
<Plus className="mr-2 h-4 w-4" />
新建管理员
</Button>
</Link>
</div>
<PageTable
basePath="/admins"
load={(data) =>
getAdmins({
page: data.page,
pageSize: data.pageSize,
where: data.keyword
? {
OR: [
{ email: { contains: data.keyword } },
{ username: { contains: data.keyword } },
{ nickname: { contains: data.keyword } },
],
}
: {},
})
}
columns={columns}
searchParams={props.searchParams}
/>
</div>
);
}

- 创建 /admin/{module}/action.ts

  - 包含所有的CRUD操作
  - 使用 import { db } from "@/lib/db"; 导入prisma
  - 例如分页接口如下：
    // 获取管理员列表
    async function getAdmins(
    query: PageableQuery<typeof db.admin> = { page: 1, pageSize: 10 }
    ) {
    const skip = (query.page - 1) \* query.pageSize;
    const [total, data] = await Promise.all([
    db.admin.count({ where: query.where }),
    db.admin.findMany({
    skip,
    take: query.pageSize,
    orderBy: {
    createdAt: "desc",
    },
    where: query.where,
    }),
    ]);

    return {
    data,
    total,
    page: query.page,
    pageSize: query.pageSize,
    totalPages: Math.ceil(total / query.pageSize),
    };
    }

- 创建 /admin/{module}/columns.tsx

```typescript
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { Menu } from "@prisma/client";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit } from "lucide-react";
import { deleteMenu } from "./actions";
import Link from "next/link";
import { RemoveButton } from "@/components/remove-button";

export const columns: ColumnDef<Menu>[] = [
  {
    accessorKey: "name",
    header: "菜单名称",
  },
  {
    accessorKey: "url",
    header: "URL",
  },
  {
    accessorKey: "orderNum",
    header: "排序",
  },
  {
    accessorKey: "icon",
    header: "图标",
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const menu = row.original;
      const handleDelete = async () => {
        if (!confirm("确定要删除这个菜单吗？")) return;
        await deleteMenu(menu.id);
        window.location.reload();
      };
      return (
        <div className="flex gap-2">
          <Link href={`/menus/${menu.id}`}>
            <Button className="h-8 py-0" variant={"ghost"}>
              编辑
              <Edit className="h-4 w-4" />
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">打开菜单</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <RemoveButton onDeleteAction={handleDelete} />
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
  },
];
```

- 创建表单 /admin/{module}/\_components/form.tsx

```tsx
"use client";
import React, { useState, useEffect } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import { Menu } from "@prisma/client";
import { createMenu, updateMenu, fetchMenus } from "../actions";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";

const menuFormSchema = z.object({
  name: z.string().min(1, "菜单名称不能为空"),
  url: z.string().min(1, "URL不能为空"),
  orderNum: z.number().min(0, "排序号必须大于等于0"),
  parentId: z.string().nullable(),
  icon: z.string().optional().nullable(),
});

type MenuFormValues = z.infer<typeof menuFormSchema>;

interface MenuFormProps {
  initialData?: Menu;
}

export function MenuForm({ initialData }: MenuFormProps) {
  const router = useRouter();
  const [menus, setMenus] = useState<Menu[]>([]);
  const { toast } = useToast();

  useEffect(() => {
    const loadMenus = async () => {
      const data = await fetchMenus();
      setMenus(data);
    };
    loadMenus();
  }, []);

  const form = useForm<MenuFormValues>({
    resolver: zodResolver(menuFormSchema),
    defaultValues: initialData || {
      name: "",
      url: "",
      orderNum: 0,
      parentId: null,
      icon: "",
    },
  });

  async function onSubmit(data: MenuFormValues) {
    try {
      if (initialData) {
        await updateMenu(initialData.id, data);
      } else {
        await createMenu(data);
      }
      router.push("/menus");
      router.refresh();
    } catch (error) {
      toast({
        title: "操作失败",
        description: error instanceof Error ? error.message : "操作失败",
        variant: "destructive",
      });
      console.error("提交失败:", error);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>菜单名称</FormLabel>
              <FormControl>
                <Input placeholder="请输入菜单名称" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="url"
          render={({ field }) => (
            <FormItem>
              <FormLabel>URL</FormLabel>
              <FormControl>
                <Input placeholder="请输入URL" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="orderNum"
          render={({ field }) => (
            <FormItem>
              <FormLabel>排序号</FormLabel>
              <FormControl>
                <Input
                  type="number"
                  placeholder="请输入排序号"
                  {...field}
                  onChange={(e) => field.onChange(parseInt(e.target.value))}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="parentId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>父菜单</FormLabel>
              <FormControl>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value!}
                  value={field.value!}
                >
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="选择父菜单" />
                  </SelectTrigger>
                  <SelectContent>
                    {menus.map((menu) => (
                      <SelectItem key={menu.id} value={menu.id}>
                        {menu.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="icon"
          render={({ field }) => (
            <FormItem>
              <FormLabel>图标</FormLabel>
              <FormControl>
                <Input
                  placeholder="请输入图标"
                  {...field}
                  value={field.value!}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">{initialData ? "更新" : "创建"}</Button>
      </form>
    </Form>
  );
}
```

- 创建新建页面： /admin/{module}/new/page.tsx
- 创建编辑页面： /admin/{module}/{id}/page.tsx
- 创建详情页面： /admin/{module}/{id}/detail/page.tsx

================
File: docs/server-ui/page-list.md
================
# PageList 组件

PageList 是一个用于展示分页列表数据的 React 组件。它提供了灵活的数据加载、分页和渲染选项。

## 属性

| 属性         | 类型      | 描述                                              |
| ------------ | --------- | ------------------------------------------------- |
| searchParams | object    | 当前的搜索参数对象                                |
| queryParse   | object    | 自定义查询参数解析器，默认使用 `pageSearchParams` |
| basePath     | string    | 基础路径，用于构建分页 URL                        |
| load         | function  | 加载数据的异步函数                                |
| renderItem   | function  | 渲染每个列表项的函数                              |
| empty        | ReactNode | 自定义空状态组件                                  |
| emptyMessage | string    | 空状态显示的消息                                  |
| onDelete     | function  | 删除项目的回调函数（可选）                        |

## 使用示例

```tsx
import PageList from "@/components/PageList";
import { UserCard } from "@/components/UserCard";

export default function UsersPage({ searchParams }) {
  return (
    <PageList<User>
      searchParams={searchParams}
      basePath="/users"
      load={async (params) => {
        const response = await fetch(
          `/api/users?page=${params.page}&pageSize=${params.pageSize}`
        );
        return await response.json();
      }}
      renderItem={(user, index) => <UserCard key={user.id} user={user} />}
      emptyMessage="暂无用户数据"
    />
  );
}
```

## 说明

1. 组件会自动处理分页逻辑，包括 URL 参数的更新。
2. 可以通过 `queryParse` 属性自定义查询参数的解析方式。
3. `load` 函数需要返回一个包含 `data` 和 `total` 的对象。
4. 组件内置了空状态的展示，可以通过 `empty` 和 `emptyMessage` 属性自定义。
5. 分页控件使用了 `SmartPagination` 组件，支持改变每页显示数量。

通过使用 PageList 组件，可以快速构建具有分页功能的列表页面，减少重复代码，提高开发效率。

================
File: docs/server-ui/page-table.md
================
# PageTable 组件

PageTable 是一个通用的分页表格组件，用于展示和管理分页数据。它封装了数据加载、分页逻辑和 UI 渲染，提供了一个简单易用的接口来创建可定制的数据表格。

## 属性

| 属性名          | 类型                                                                     | 描述                                              |
| --------------- | ------------------------------------------------------------------------ | ------------------------------------------------- |
| searchParams    | `SearchParams`                                                           | 当前页面的搜索参数                                |
| queryParse      | `T`                                                                      | 自定义查询参数解析器，默认使用 `pageSearchParams` |
| load            | `(params: inferParserType<T>) => Promise<{ data: D[]; total: number; }>` | 加载数据的异步函数                                |
| columns         | `ColumnDef<D>[]`                                                         | 表格列定义                                        |
| basePath        | `string`                                                                 | 基础路径，用于构建分页 URL                        |
| pageSizeOptions | `number[]`                                                               | 可选的每页显示数量选项，默认为 `[10, 20, 30, 50]` |

## 使用示例

```tsx
import PageTable from "@/components/PageTable";
import { ColumnDef } from "@/components/shared/data-table";

// 定义数据类型
interface User {
  id: string;
  name: string;
  email: string;
}

// 定义列
const columns: ColumnDef<User>[] = [
  {
    accessorKey: "name",
    header: "姓名",
  },
  {
    accessorKey: "email",
    header: "邮箱",
  },
];

// 在页面组件中使用
export default function UsersPage({ searchParams }) {
  return (
    <PageTable<User>
      searchParams={searchParams}
      basePath="/users"
      columns={columns}
      load={async (params) => {
        // 实现数据加载逻辑
        const response = await fetch(
          `/api/users?page=${params.page}&pageSize=${params.pageSize}`
        );
        const { data, total } = await response.json();
        return { data, total };
      }}
    />
  );
}
```

这个示例展示了如何使用 PageTable 组件来创建一个用户列表页面。组件会自动处理分页、数据加载和表格渲染，大大简化了开发过程。

================
File: docs/shared-ui/smart-pagination.md
================
# SmartPagination 组件

SmartPagination 是一个灵活的分页组件，提供了自定义选项和页面大小更改功能。

## 使用场景

该组件适用于需要分页功能的列表或表格展示，特别是在数据量较大时。它允许用户轻松地在不同页面间导航，并可选择每页显示的项目数量。

## 使用示例

```jsx
import { SmartPagination } from "@/components/shared/smart-pagination";

function MyComponent() {
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const total = 100;

  return (
    <SmartPagination
      page={page}
      pageSize={pageSize}
      total={total}
      onChange={setPage}
      onChangePageSize={setPageSize}
      showSizeChanger={true}
    />
  );
}
```

## 属性

| 属性名           | 类型                                    | 默认值           | 描述                                     |
| ---------------- | --------------------------------------- | ---------------- | ---------------------------------------- |
| page             | number                                  | -                | 当前页码（必填）                         |
| pageSize         | number                                  | -                | 每页项目数（必填）                       |
| total            | number                                  | -                | 总项目数（必填）                         |
| onPrev           | () => void                              | -                | 上一页回调函数（会先触发onChange）       |
| onNext           | () => void                              | -                | 下一页回调函数（会先触发onChange）       |
| onChange         | (page: number,pageSize: number) => void | -                | 页码变化回调函数                         |
| onChangePageSize | (pageSize: number) => void              | -                | 每页项目数变化回调函数(会先触发onChange) |
| pageSizeOptions  | number[]                                | [10, 20, 30, 50] | 可选的每页项目数                         |
| showSizeChanger  | boolean                                 | false            | 是否显示每页项目数选择器                 |
| className        | string                                  | -                | 额外的 CSS 类名                          |
| style            | React.CSSProperties                     | -                | 内联样式                                 |
| ref              | React.Ref<HTMLDivElement>               | -                | Ref 引用                                 |

## 注意事项

- 确保为必填属性（page, pageSize, total）提供正确的值。
- 如果需要自定义页码变化或页面大小变化的行为，请提供相应的回调函数（onChange, onChangePageSize）。
- 设置 `showSizeChanger` 为 true 可启用每页项目数选择功能。
- 组件会根据总页数自动调整页码显示逻辑，确保良好的用户体验。

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends(
    "next/core-web-vitals",
    "next/typescript",
    "prettier" 
  ),
  {
    rules: {
      "@typescript-eslint/no-unused-vars": ["error", { 
        "args": "all",
        "argsIgnorePattern": "^_",
        "caughtErrors": "all",
        "caughtErrorsIgnorePattern": "^_",
        "destructuredArrayIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "ignoreRestSiblings": true
      }],
      "no-console": ["warn", { allow: ["warn", "error"] }],
      "no-multiple-empty-lines": ["error", { max: 1, maxEOF: 0 }],
      "no-trailing-spaces": "error",
    }
  }
];

export default eslintConfig;

================
File: global.d.ts
================
export {}; // 显式将文件标记为模块
import { Prisma } from "@prisma/client";

declare global {
  // you can use typical basic types
  // or you can use classes, interfaces, object types, etc.
  namespace PrismaJson {
    type StringArray = string[] | null;
  }
  type PageableQuery<T> = {
    page: number;
    pageSize: number;
    where?: Prisma.Args<T, "findMany">["where"];
    orderBy?: Prisma.Args<T, "findMany">["orderBy"];
    include?: Prisma.Args<T, "findMany">["include"];
  };
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "*",
        port: "",
        pathname: "/**",
      },
      {
        protocol: "http",
        hostname: "*",
        port: "",
        pathname: "/**",
      },
    ],
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "coze-webhook-admin",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:push": "prisma db push",
    "db:reset": "prisma db reset",
    "db:migrate": "prisma migrate dev --name init",
    "db:generate": "prisma generate",
    "db:studio": "prisma studio",
    "repomix": "repomix",
    "ui:add": "pnpm dlx shadcn@latest add"
  },
  "dependencies": {
    "@conform-to/react": "^1.2.2",
    "@conform-to/zod": "^1.2.2",
    "@hookform/resolvers": "^3.9.1",
    "@prisma/client": "6.2.1",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-tooltip": "^1.1.6",
    "@tanstack/react-table": "^8.20.6",
    "@types/json-bigint": "^1.0.4",
    "bcrypt": "^5.1.1",
    "chart.js": "^4.4.7",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.0",
    "date-fns": "^4.1.0",
    "elysia": "^1.2.9",
    "framer-motion": "^11.15.0",
    "lucide-react": "^0.469.0",
    "next": "15.1.3",
    "next-auth": "5.0.0-beta.25",
    "next-logger": "^5.0.1",
    "next-themes": "^0.4.4",
    "nuqs": "^2.3.0",
    "pino": "^9.6.0",
    "prisma": "^6.2.1",
    "prisma-json-types-generator": "^3.2.2",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.0",
    "repomix": "^0.2.17",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "text-search-engine": "^1.4.2",
    "uuid": "^11.0.3",
    "vaul": "^1.1.2",
    "zod": "^3.24.1",
    "zod-to-json-schema": "^3.24.1"
  },
  "devDependencies": {
    "@elysiajs/swagger": "^1.2.0",
    "@eslint/eslintrc": "^3",
    "@types/bcrypt": "^5.0.2",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.0.1",
    "eslint": "^9",
    "eslint-config-next": "15.1.3",
    "eslint-config-prettier": "^9.1.0",
    "postcss": "^8",
    "prettier": "^3.1.1",
    "prettier-plugin-tailwindcss": "^0.5.9",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  },
  "pnpm": {
    "patchedDependencies": {
      "@elysiajs/swagger@1.2.0": "patches/@elysiajs__swagger@1.2.0.patch"
    }
  }
}

================
File: patches/@elysiajs__swagger@1.2.0.patch
================
diff --git a/dist/index.mjs b/dist/index.mjs
index f46ea5afe65e99731f941ac66ccdb8aea0fa5adf..13a2b203b61e0dcead6e7577b6ff915da907237c 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -426,7 +426,7 @@ var swagger = async ({
   const app = new Elysia({ name: "@elysiajs/swagger" });
   app.get(path, function documentation2() {
     const combinedSwaggerOptions = {
-      url: `/${relativePath}/json`,
+      url: `${relativePath}/json`,
       dom_id: "#swagger-ui",
       ...swaggerOptions
     };
@@ -440,7 +440,7 @@ var swagger = async ({
     const scalarConfiguration = {
       spec: {
         ...scalarConfig.spec,
-        url: `/${relativePath}/json`
+        url: `${relativePath}/json`
       },
       ...scalarConfig,
       // so we can showcase the elysia theme

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: prettier.config.mjs
================
/** @type {import('prettier').Config} */
export default {
  endOfLine: "lf",
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: "es5",
  importOrder: [
    "^(react/(.*)$)|^(react$)",
    "^(next/(.*)$)|^(next$)",
    "<THIRD_PARTY_MODULES>",
    "",
    "^types$",
    "^@/types/(.*)$",
    "^@/config/(.*)$",
    "^@/lib/(.*)$",
    "^@/hooks/(.*)$",
    "^@/components/ui/(.*)$",
    "^@/components/(.*)$",
    "^@/styles/(.*)$",
    "^@/app/(.*)$",
    "",
    "^[./]",
  ],
  importOrderSeparation: false,
  importOrderSortSpecifiers: true,
  importOrderBuiltinModulesToTop: true,
  importOrderParserPlugins: ["typescript", "jsx", "decorators-legacy"],
  importOrderMergeDuplicateImports: true,
  importOrderCombineTypeAndValueImports: true,
  plugins: ["prettier-plugin-tailwindcss"],
};

================
File: prisma/schema.prisma
================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator json {
  provider = "prisma-json-types-generator"
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  type      String   @default("ADMIN") // 角色类型: superadmin(超级管理员), admin(管理员)
  nickname  String?
  avatar    String?
  phone     String?  @unique
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  code        String       @unique // 角色编码,用于程序中识别
  type        String       @default("CUSTOM") // 角色类型: SYSTEM(系统内置), CUSTOM(自定义)
  status      String       @default("ACTIVE") // 状态: ACTIVE, DISABLED
  description String?
  permissions Permission[]
  admins      Admin[]
  isDefault   Boolean      @default(false) // 是否为默认角色
  sort        Int          @default(0) // 排序
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String       @id @default(cuid())
  name        String       @unique
  key         String       @unique // 权限标识符
  description String?
  parentId    String?
  parent      Permission?  @relation("ParentChild", fields: [parentId], references: [id])
  children    Permission[] @relation("ParentChild")
  roles       Role[]
  menus       Menu[]
  sort        Int          @default(0) // 排序
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Menu {
  id          String       @id @default(cuid())
  name        String
  parentId    String? // 父菜单ID
  sort        Int          @default(0) // 排序
  url         String // 前端页面路由地址或接口地址
  permissions Permission[]
  icon        String? // 菜单图标
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CozeWebhook {
  id            String        @id @default(cuid())
  name          String
  url           String
  authorization String
  apiEndpoints  ApiEndpoint[]
  logs          ApiEndpointLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ApiEndpoint {
  id             String           @id @default(cuid())
  cozeWebhook    CozeWebhook      @relation(fields: [cozeWebhookId], references: [id])
  cozeWebhookId  String
  type           String           // openaiLike or request
  name           String
  description    String?
  apiKeys        ApiKey[]
  logs           ApiEndpointLog[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ApiKey {
  id            String        @id @default(cuid())
  key           String        @unique
  apiEndpoints  ApiEndpoint[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ApiEndpointLog {
  id              String      @id @default(cuid())
  apiEndpoint     ApiEndpoint @relation(fields: [apiEndpointId], references: [id])
  apiEndpointId   String
  cozeWebhook     CozeWebhook @relation(fields: [cozeWebhookId], references: [id])
  ip              String?
  cozeWebhookId   String
  requestParams   String      // JSON string of request parameters
  response        String?      // JSON string of response
  duration        Int?         // Duration in milliseconds
  apiKey          String?      // The API key used for this request
  createdAt       DateTime    @default(now())
}

================
File: README.MD
================
# COZE 管理端

- 创建 coze_webhook,包含 url,authorization
- 床架 api_endpoint管理，包含字段 coze_webhook_id,type(openaiLike/request),name,description,创建时间
- 创建 api_key 管理，随机生成apikey,并且可以勾选允许调用的api_endpoint
- 创建 api_endpoint_logs，记录 hook的请求日志（包含 接口调用请求参数，时间，apid_endpoint_id,coze_webhook_id，返回结果，接口调用耗费时间，使用key）

================
File: repomix.config.json
================
{
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "fileSummary": true,
    "directoryStructure": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  }
}

================
File: src/api/index.ts
================
import swagger from "@elysiajs/swagger";
import { Elysia, ValidationError } from "elysia";

const app = new Elysia({ prefix: "/api" });
app.onError({ as: "global" }, ({ code, error }) => {
  if (code === "VALIDATION" && error instanceof ValidationError) {
    return { error: error.all?.map((z) => z.summary).join(","), code };
  }
  return Response.json(
    { error: error.toString(), code },
    {
      status: 500,
    }
  );
});
app.use(swagger({ path: "/swagger" }));

export type TElysiaApp = typeof app;

export { app };

================
File: src/api/lib/json.bigint.ts
================
import Elysia from "elysia";

export function JSONBigInt({ response }: { response: unknown }) {
  if (response instanceof Response) {
    return response;
  }

  if (typeof response === "object" && response !== null) {
    return new Response(
      JSON.stringify(response, (_, v) =>
        typeof v === "bigint" ? Number(v.toString()) : v
      ),
      {
        headers: {
          "Content-Type": `application/json; charset=utf-8`,
        },
      }
    );
  }
}

export function jsonBigInt() {
  return new Elysia({ name: "jsonBigInt" }).mapResponse(
    { as: "global" },
    JSONBigInt
  );
  // .onBeforeHandle({ as: "global" }, ({ body }) => {
  //   console.log("body", body);
  // });
}

================
File: src/api/middlewares/auth.ts
================
import { auth as nextjsAuth } from "@/lib/auth";
import Elysia from "elysia";
import type { Session } from "next-auth";

/** 认证数据 */
export type AuthData = {
  Auth: {
    /** 会话用户 */
    user: Session["user"];
  };
};

/**
 * 授权信息
 * @returns
 */
export function auth() {
  return new Elysia({ name: "Service.Auth" })
    .derive({ as: "scoped" }, async () => {
      const user = await nextjsAuth();
      return { Auth: { user: user?.user } };
    })
    .onBeforeHandle({ as: "scoped" }, ({ Auth, error }) => {
      if (!Auth?.user || !Auth.user) return error(401);
    });
}

================
File: src/app/admin/admins/_components/admin-form.tsx
================
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import { createAdmin, updateAdmin } from "../actions";
import { Admin } from "@prisma/client";
import { ADMIN_ROLE } from "@/service/enum/ADMIN_ROLE";

const formSchema = z.object({
  email: z.string().email({ message: "请输入有效的邮箱地址" }),
  username: z.string().min(2, { message: "用户名至少2个字符" }),
  password: z.string().min(6, { message: "密码至少6个字符" }).optional(),
  phone: z.string().optional(),
  nickname: z.string().optional(),
});

export default function AdminForm({ admin }: { admin?: Admin }) {
  const router = useRouter();
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: admin?.email || "",
      username: admin?.username || "",
      nickname: admin?.nickname || "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    try {
      if (admin) {
        await updateAdmin(admin.id, {
          ...values,
          role: values.role as ADMIN_ROLE,
        });
      } else {
        await createAdmin({
          ...values,
          password: values.password || "123456",
          role: values.role as ADMIN_ROLE,
        });
      }
      router.push("/admins");
      router.refresh();
    } catch (error) {
      alert(error instanceof Error ? error.message : "操作失败");
    }
  }

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="w-[400px] space-y-8"
      >
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>邮箱</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>用户名</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {!admin && (
          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel>密码</FormLabel>
                <FormControl>
                  <Input type="password" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        )}
        <FormField
          control={form.control}
          name="nickname"
          render={({ field }) => (
            <FormItem>
              <FormLabel>昵称</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="phone"
          render={({ field }) => (
            <FormItem>
              <FormLabel>电话</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit">{admin ? "更新" : "创建"}</Button>
      </form>
    </Form>
  );
}

================
File: src/app/admin/admins/[id]/loading.tsx
================
export { SkeletonForm as default } from "@/components/skeleton/form";

================
File: src/app/admin/admins/[id]/page.tsx
================
import { AdminService } from "@/service/admin.service";
import AdminForm from "../_components/admin-form";
import { notFound } from "next/navigation";

export default async function EditAdminPage({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = await params;
  const admin = await AdminService.getAdmin(id);
  if (!admin) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="mb-6 text-2xl font-bold">编辑管理员</h1>
      <AdminForm admin={admin} />
    </div>
  );
}

================
File: src/app/admin/admins/actions.ts
================
"use server";

import { AdminService } from "@/service/admin.service";
import { ADMIN_ROLE } from "@/service/enum/ADMIN_ROLE";
import { revalidatePath } from "next/cache";

export async function getAdmins(
  ...args: Parameters<typeof AdminService.getAdmins>
) {
  return AdminService.getAdmins(...args);
}

export async function resetPassword(adminId: string) {
  // 这里需要在 AdminService 中实现重置密码的方法
  await AdminService.updateAdmin(adminId, { password: "admin" });
  revalidatePath("/admins");
  return { success: true };
}

export async function deleteAdmin(adminId: string) {
  await AdminService.deleteAdmin(adminId);
  revalidatePath("/admins");
  return { success: true };
}

export async function createAdmin(data: {
  email: string;
  password: string;
  username: string;
  nickname?: string;
  phone?: string;
  role?: ADMIN_ROLE;
}) {
  await AdminService.createAdmin(data.email, data.username, data.password, {
    nickname: data.nickname,
    role: data.role,
    phone: data.phone,
  });
  revalidatePath("/admins");
  return { success: true };
}

export async function updateAdmin(
  adminId: string,
  data: {
    email?: string;
    password?: string;
    username?: string;
    nickname?: string;
    phone?: string;
    role?: ADMIN_ROLE;
  }
) {
  await AdminService.updateAdmin(adminId, data);
  revalidatePath("/admins");
  return { success: true };
}

================
File: src/app/admin/admins/columns.tsx
================
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { Admin } from "@prisma/client";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Key, Edit, Trash } from "lucide-react";
import { resetPassword, deleteAdmin } from "./actions";
import Link from "next/link";
import { format } from "date-fns";
import { ADMIN_ROLE, ADMIN_ROLE_NAME } from "@/service/enum/ADMIN_ROLE";
import { useToast } from "@/hooks/use-toast";

const AdminActions = ({ admin }: { admin: Admin }) => {
  const { toast } = useToast();
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0">
          <span className="sr-only">打开菜单</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem
          onClick={async () => {
            if (confirm("确定要重置密码吗？")) {
              await resetPassword(admin.id);
              alert("密码已重置");
            }
          }}
        >
          <Key className="mr-2 h-4 w-4" />
          重置密码
        </DropdownMenuItem>
        <Link href={`/admins/${admin.id}`}>
          <DropdownMenuItem>
            <Edit className="mr-2 h-4 w-4" />
            编辑信息
          </DropdownMenuItem>
        </Link>
        <DropdownMenuItem
          onClick={async () => {
            if (confirm("确定要删除该管理员吗？")) {
              try {
                await deleteAdmin(admin.id);
                toast({ description: "管理员已删除" });
              } catch (error) {
                toast({
                  description:
                    error instanceof Error ? error.message : "删除管理员失败",
                  variant: "destructive",
                });
              }
            }
          }}
          className="text-red-600"
        >
          <Trash className="mr-2 h-4 w-4" />
          删除管理员
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export const columns: ColumnDef<Admin>[] = [
  {
    accessorKey: "avatar",
    header: "头像",
    cell: ({ row }) => {
      const admin = row.original;
      return (
        <Avatar>
          <AvatarImage src={admin.avatar || ""} alt={admin.email || ""} />
          <AvatarFallback>{admin.email?.[0] || admin.email[0]}</AvatarFallback>
        </Avatar>
      );
    },
  },
  {
    accessorKey: "email",
    header: "邮箱",
  },
  {
    accessorKey: "username",
    header: "用户名",
  },
  {
    accessorKey: "nickname",
    header: "昵称",
  },
  {
    accessorKey: "phone",
    header: "电话",
  },
  {
    accessorKey: "role",
    header: "角色",
    cell: ({ row }) => {
      const admin = row.original;
      return ADMIN_ROLE_NAME[admin.role as ADMIN_ROLE];
    },
  },
  {
    accessorKey: "createdAt",
    header: "创建时间",
    cell: ({ row }) => {
      return format(new Date(row.original.createdAt), "yyyy-MM-dd HH:mm:ss");
    },
  },
  {
    id: "actions",
    cell: ({ row }) => <AdminActions admin={row.original} />,
  },
];

================
File: src/app/admin/admins/new/loading.tsx
================
export { SkeletonForm as default } from "@/components/skeleton/form";

================
File: src/app/admin/admins/new/page.tsx
================
import AdminForm from "../_components/admin-form";

export default function NewAdminPage() {
  return (
    <div className="container mx-auto py-10">
      <h1 className="text-2xl font-bold mb-6">新建管理员</h1>
      <AdminForm />
    </div>
  );
}

================
File: src/app/admin/admins/page.tsx
================
import { getAdmins } from "./actions";
import { columns } from "./columns";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import Link from "next/link";
import PageTable from "@/components/page-table";

export default async function AdminsPage(props: PageProps) {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">管理员管理</h1>
        <Link href="/admins/new">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            新建管理员
          </Button>
        </Link>
      </div>
      <PageTable
        basePath="/admins"
        load={(data) =>
          getAdmins({
            page: data.page,
            pageSize: data.pageSize,
            where: data.keyword
              ? {
                  OR: [
                    { email: { contains: data.keyword } },
                    { username: { contains: data.keyword } },
                    { nickname: { contains: data.keyword } },
                  ],
                }
              : {},
          })
        }
        columns={columns}
        searchParams={props.searchParams}
      />
    </div>
  );
}

================
File: src/app/admin/api-endpoints/_components/basic-info.tsx
================
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ApiEndpoint } from "@prisma/client";
import Link from "next/link";

interface BasicInfoProps {
  apiEndpoint: ApiEndpoint & {
    path: string;
    cozeWebhook: {
      name: string;
      url: string;
    };
  };
}

export function BasicInfo({ apiEndpoint }: BasicInfoProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>基本信息</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <label className="font-medium">名称:</label>
          <p>{apiEndpoint.name}</p>
        </div>
        <div>
          <label className="font-medium">webhook:</label>
          <p>
            <Link
              className="text-blue-600 hover:underline"
              href={`/admin/webhooks/${apiEndpoint.cozeWebhookId}`}
            >
              {apiEndpoint.cozeWebhook?.name}
            </Link>
          </p>
        </div>
        <div>
          <label className="font-medium">描述:</label>
          <p>{apiEndpoint.description}</p>
        </div>
        <div>
          <label className="font-medium">路径:</label>
          <p>{apiEndpoint.path}</p>
        </div>
        <div>
          <label className="font-medium">类型:</label>
          <p>{apiEndpoint.type}</p>
        </div>
        <div>
          <label className="font-medium">创建时间:</label>
          <p>{apiEndpoint.createdAt.toLocaleString()}</p>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: src/app/admin/api-endpoints/_components/detail-tabs.tsx
================
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ApiEndpoint } from "@prisma/client";
import { KeysList } from "./keys-list";
import { RecordsList } from "./records-list";
import { Suspense } from "react";

interface DetailTabsProps {
  apiEndpoint: ApiEndpoint & {
    path: string;
  };
}

export function DetailTabs({ apiEndpoint }: DetailTabsProps) {
  return (
    <Tabs defaultValue="method" className="w-full">
      <TabsList className="grid w-full grid-cols-3">
        <TabsTrigger value="method">调用方法</TabsTrigger>
        <TabsTrigger value="records">调用记录</TabsTrigger>
        <TabsTrigger value="keys">可用密钥</TabsTrigger>
      </TabsList>
      <TabsContent value="method">
        <Card>
          <CardContent className="pt-6">
            {apiEndpoint.type === "openaiLike" && (
              <pre className="rounded bg-slate-950 p-4 text-sm text-slate-50">
                {`curl -X POST \\
${process.env.NEXT_PUBLIC_API_URL}${apiEndpoint.path} \\
-H "Content-Type: application/json" \\
-H "Authorization: Bearer <YOUR_API_KEY>" \\
-d '{
      "model": "${apiEndpoint.id}",
      "messages": [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": "Hello!"}
      ],
      "stream": false
    }'
`}
              </pre>
            )}
            {apiEndpoint.type === "request" && (
              <pre className="rounded bg-slate-950 p-4 text-sm text-slate-50">
                {`curl -X POST \\
${process.env.NEXT_PUBLIC_API_URL}${apiEndpoint.path} \\
-H "Content-Type: application/json" \\
-H "Authorization: Bearer <YOUR_API_KEY>" \\
-d '{ "foo": "bar" }'
`}
              </pre>
            )}
          </CardContent>
        </Card>
      </TabsContent>
      <TabsContent value="records">
        <Card>
          <CardContent className="pt-6">
            <Suspense fallback={<div>Loading...</div>}>
              <RecordsList endpointId={apiEndpoint.id} />
            </Suspense>
          </CardContent>
        </Card>
      </TabsContent>
      <TabsContent value="keys">
        <Card>
          <CardContent className="pt-6">
            <Suspense fallback={<div>Loading...</div>}>
              <KeysList endpointId={apiEndpoint.id} />
            </Suspense>
          </CardContent>
        </Card>
      </TabsContent>
    </Tabs>
  );
}

================
File: src/app/admin/api-endpoints/_components/form.tsx
================
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import { ApiEndpoint, CozeWebhook } from "@prisma/client";
import { createApiEndpoint, updateApiEndpoint } from "../actions";
import { useToast } from "@/hooks/use-toast";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";

const apiEndpointFormSchema = z.object({
  name: z.string().min(1, "名称不能为空"),
  type: z.enum(["openaiLike", "request"], {
    required_error: "请选择类型",
  }),
  description: z.string().optional(),
  cozeWebhookId: z.string().min(1, "请选择所属Webhook"),
});

type ApiEndpointFormValues = z.infer<typeof apiEndpointFormSchema>;

interface ApiEndpointFormProps {
  initialData?: ApiEndpoint & {
    cozeWebhook: CozeWebhook;
  };
  webhookOptions: {
    id: string;
    url: string;
    name: string;
  }[];
}

export function ApiEndpointForm({
  initialData,
  webhookOptions,
}: ApiEndpointFormProps) {
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<ApiEndpointFormValues>({
    resolver: zodResolver(apiEndpointFormSchema),
    defaultValues: initialData
      ? {
          name: initialData.name,
          type: initialData.type as "openaiLike" | "request",
          description: initialData.description || "",
          cozeWebhookId: initialData.cozeWebhookId,
        }
      : {
          name: "",
          type: "request",
          description: "",
          cozeWebhookId: "",
        },
  });

  async function onSubmit(data: ApiEndpointFormValues) {
    try {
      if (initialData) {
        await updateApiEndpoint(initialData.id, data);
      } else {
        await createApiEndpoint(data);
      }
      router.push("/admin/api-endpoints");
      router.refresh();
    } catch (error) {
      toast({
        title: "操作失败",
        description: error instanceof Error ? error.message : "操作失败",
        variant: "destructive",
      });
      console.error("提交失败:", error);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>名称</FormLabel>
              <FormControl>
                <Input placeholder="请输入API端点名称" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="type"
          render={({ field }) => (
            <FormItem>
              <FormLabel>类型</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="请选择类型" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="openaiLike">OpenAI兼容</SelectItem>
                  <SelectItem value="request">普通请求</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>描述</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="请输入API端点描述"
                  className="resize-none"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="cozeWebhookId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>所属Webhook</FormLabel>
              <Select
                onValueChange={field.onChange}
                defaultValue={field.value}
                disabled={!!initialData}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="请选择所属Webhook" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {webhookOptions.map((webhook) => (
                    <SelectItem key={webhook.id} value={webhook.id}>
                      {webhook.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">{initialData ? "更新" : "创建"}</Button>
      </form>
    </Form>
  );
}

================
File: src/app/admin/api-endpoints/_components/keys-list.tsx
================
"use client";

import { ApiKey } from "@prisma/client";
import { DataTable } from "@/components/shared/data-table";
import { ColumnDef } from "@tanstack/react-table";
import { formatDateTime } from "@/lib/utils";
import { getEndpointKeys } from "../actions";
import { use, useEffect, useState } from "react";

interface KeysListProps {
  endpointId: string;
}

const columns: ColumnDef<ApiKey>[] = [
  {
    accessorKey: "key",
    header: "密钥",
  },
  {
    accessorKey: "name",
    header: "名称",
  },
  {
    accessorKey: "createdAt",
    header: "创建时间",
    cell: ({ row }) => formatDateTime(row.original.createdAt),
  },
  {
    accessorKey: "expiresAt",
    header: "过期时间",
    // cell: ({ row }) =>
    //   row.original.expiresAt
    //     ? formatDateTime(row.original.expiresAt)
    //     : "永不过期",
  },
];

export function KeysList({ endpointId }: KeysListProps) {
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [data, setData] = useState<{ data: ApiKey[]; total: number } | null>(
    null
  );
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    setLoading(true);
    getEndpointKeys(endpointId, { page, pageSize })
      .then((response) => {
        setData(response);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        setLoading(false);
      });
  }, [endpointId, page, pageSize]);
  return (
    <DataTable
      columns={columns}
      data={data?.data ?? []}
      pageNumber={page}
      rowCount={data?.total}
      pageSize={pageSize}
      loading={loading}
      onPagination={(page, pageSize) => {
        setPage(page);
        setPageSize(pageSize);
      }}
    />
  );
}

================
File: src/app/admin/api-endpoints/_components/records-list.tsx
================
"use client";

import { DataTable } from "@/components/shared/data-table";
import { ColumnDef } from "@tanstack/react-table";
import { formatDateTime } from "@/lib/utils";
import { getEndpointRecords } from "../actions";
import { useEffect, useState } from "react";
import { ApiEndpointLog } from "@prisma/client";

interface RecordsListProps {
  endpointId: string;
}

const columns: ColumnDef<ApiEndpointLog>[] = [
  {
    accessorKey: "id",
    header: "ID",
  },
  {
    accessorKey: "method",
    header: "请求方法",
  },
  {
    accessorKey: "status",
    header: "状态码",
  },
  {
    accessorKey: "ip",
    header: "IP地址",
  },
  {
    accessorKey: "duration",
    header: "耗时(ms)",
  },
  {
    accessorKey: "createdAt",
    header: "调用时间",
    cell: ({ row }) => formatDateTime(row.original.createdAt),
  },
];

export function RecordsList({ endpointId }: RecordsListProps) {
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [data, setData] = useState<{
    data: ApiEndpointLog[];
    total: number;
  } | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    setLoading(true);
    getEndpointRecords(endpointId, { page, pageSize })
      .then((response) => {
        setData(response);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        setLoading(false);
      });
  }, [endpointId, page, pageSize]);

  return (
    <DataTable
      columns={columns}
      data={data?.data ?? []}
      pageNumber={page}
      rowCount={data?.total}
      pageSize={pageSize}
      loading={loading}
      onPagination={(page, pageSize) => {
        setPage(page);
        setPageSize(pageSize);
      }}
    />
  );
}

================
File: src/app/admin/api-endpoints/[id]/detail/page.tsx
================
import { notFound } from "next/navigation";
import { getApiEndpoint } from "../../actions";
import { Button } from "@/components/ui/button";
import { Edit } from "lucide-react";
import Link from "next/link";
import { BasicInfo } from "../../_components/basic-info";
import { DetailTabs } from "../../_components/detail-tabs";

interface ApiEndpointDetailPageProps {
  params: Promise<{
    id: string;
  }>;
}

export default async function ApiEndpointDetailPage({
  params,
}: ApiEndpointDetailPageProps) {
  const { id } = await params;
  const apiEndpoint = await getApiEndpoint(id);

  if (!apiEndpoint) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">API端点详情</h1>
        <Link href={`/admin/api-endpoints/${id}`}>
          <Button>
            <Edit className="mr-2 h-4 w-4" />
            编辑
          </Button>
        </Link>
      </div>

      <div className="grid grid-cols-5 gap-6">
        {/* 左侧详情信息 */}
        <div className="col-span-2">
          <BasicInfo apiEndpoint={apiEndpoint} />
        </div>

        {/* 右侧标签页 */}
        <div className="col-span-3">
          <DetailTabs apiEndpoint={apiEndpoint} />
        </div>
      </div>
    </div>
  );
}

================
File: src/app/admin/api-endpoints/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { ApiEndpointForm } from "../_components/form";
import { getApiEndpoint, getWebhookOptions } from "../actions";

interface EditApiEndpointPageProps {
  params: Promise<{
    id: string;
  }>;
}

export default async function EditApiEndpointPage({
  params,
}: EditApiEndpointPageProps) {
  const { id } = await params;
  const [apiEndpoint, webhookOptions] = await Promise.all([
    getApiEndpoint(id),
    getWebhookOptions(),
  ]);

  if (!apiEndpoint) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">编辑API端点</h1>
      </div>
      <div className="rounded-md border p-4">
        <ApiEndpointForm
          initialData={apiEndpoint}
          webhookOptions={webhookOptions}
        />
      </div>
    </div>
  );
}

================
File: src/app/admin/api-endpoints/actions.ts
================
"use server";

import { db } from "@/lib/db";
import { ApiEndpointsService } from "@/service/api-endpoints.service";
import { revalidatePath } from "next/cache";

// 获取API端点列表
export async function getApiEndpoints(
  query: PageableQuery<typeof db.apiEndpoint> = { page: 1, pageSize: 10 }
) {
  const skip = (query.page - 1) * query.pageSize;
  const [total, data] = await Promise.all([
    db.apiEndpoint.count({ where: query.where }),
    db.apiEndpoint.findMany({
      skip,
      take: query.pageSize,
      orderBy: {
        createdAt: "desc",
      },
      where: query.where,
      include: {
        cozeWebhook: true,
        _count: {
          select: {
            apiKeys: true,
            logs: true,
          },
        },
      },
    }),
  ]);

  return {
    data,
    total,
    page: query.page,
    pageSize: query.pageSize,
    totalPages: Math.ceil(total / query.pageSize),
  };
}

// 创建API端点
export async function createApiEndpoint(data: {
  cozeWebhookId: string;
  type: string;
  name: string;
  description?: string;
}) {
  const apiEndpoint = await db.apiEndpoint.create({
    data,
  });
  revalidatePath("/admin/api-endpoints");
  return apiEndpoint;
}

// 更新API端点
export async function updateApiEndpoint(
  id: string,
  data: {
    type: string;
    name: string;
    description?: string;
  }
) {
  const apiEndpoint = await db.apiEndpoint.update({
    where: { id },
    data,
  });
  revalidatePath("/admin/api-endpoints");
  return apiEndpoint;
}

// 删除API端点
export async function deleteApiEndpoint(id: string) {
  await db.apiEndpoint.delete({
    where: { id },
  });
  revalidatePath("/admin/api-endpoints");
}

// 获取单个API端点
export async function getApiEndpoint(id: string) {
  return ApiEndpointsService.getApiendpoint(id);
}

// 获取所有Webhook选项
export async function getWebhookOptions() {
  return db.cozeWebhook.findMany({
    select: {
      id: true,
      url: true,
      name: true,
    },
    orderBy: {
      createdAt: "desc",
    },
  });
}

// 获取API端点密钥列表
export async function getEndpointKeys(
  endpointId: string,
  query: PageableQuery<typeof db.apiKey> = { page: 1, pageSize: 10 }
) {
  const skip = (query.page - 1) * query.pageSize;
  const [total, data] = await Promise.all([
    db.apiKey.count({
      where: {
        apiEndpoints: {
          some: {
            id: endpointId,
          },
        },
        ...query.where,
      },
    }),
    db.apiKey.findMany({
      skip,
      take: query.pageSize,
      where: {
        apiEndpoints: {
          some: {
            id: endpointId,
          },
        },
        ...query.where,
      },
      orderBy: {
        createdAt: "desc",
      },
    }),
  ]);

  return {
    data,
    total,
    page: query.page,
    pageSize: query.pageSize,
    totalPages: Math.ceil(total / query.pageSize),
  };
}

// 获取API端点调用记录
export async function getEndpointRecords(
  endpointId: string,
  query: { page: number; pageSize: number }
) {
  const skip = (query.page - 1) * query.pageSize;
  const [total, data] = await Promise.all([
    db.apiEndpointLog.count({
      where: { apiEndpointId: endpointId },
    }),
    db.apiEndpointLog.findMany({
      where: { apiEndpointId: endpointId },
      skip,
      take: query.pageSize,
      orderBy: {
        createdAt: "desc",
      },
    }),
  ]);

  return {
    data,
    total,
  };
}

================
File: src/app/admin/api-endpoints/columns.tsx
================
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ApiEndpoint } from "@prisma/client";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit } from "lucide-react";
import { deleteApiEndpoint } from "./actions";
import Link from "next/link";
import { RemoveButton } from "@/components/remove-button";

type ApiEndpointWithWebhook = ApiEndpoint & {
  cozeWebhook: {
    name: string;
    url: string;
  };
};

export const columns: ColumnDef<ApiEndpointWithWebhook>[] = [
  {
    accessorKey: "name",
    header: "名称",
    cell: ({ row }) => {
      return (
        <Link
          className="text-blue-600 hover:underline"
          href={`api-endpoints/${row.original.id}/detail`}
        >
          {row.original.name}
        </Link>
      );
    },
  },
  {
    accessorKey: "path",
    header: "路径",
    cell: ({ row }) => {
      if (row.original.type === "openaiLike") {
        return `/api/v1/chat/completion`;
      }
      return `/api/${row.original.id}`;
    },
  },
  {
    accessorKey: "type",
    header: "类型",
    cell: ({ row }) => {
      const type = row.original.type;
      return type === "openaiLike" ? "OpenAI兼容" : "普通请求";
    },
  },
  {
    accessorKey: "cozeWebhook",
    header: "所属Webhook",
    cell: ({ row }) => {
      const webhook = row.original.cozeWebhook;
      return webhook.name;
    },
  },
  {
    accessorKey: "createdAt",
    header: "创建时间",
    cell: ({ row }) => {
      return new Date(row.original.createdAt).toLocaleString();
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const apiEndpoint = row.original;
      const handleDelete = async () => {
        if (!confirm("确定要删除这个API端点吗？")) return;
        await deleteApiEndpoint(apiEndpoint.id);
        window.location.reload();
      };
      return (
        <div className="flex gap-2">
          <Link href={`api-endpoints/${apiEndpoint.id}`}>
            <Button className="h-8 py-0" variant={"ghost"}>
              编辑
              <Edit className="h-4 w-4" />
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">打开菜单</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <RemoveButton onDeleteAction={handleDelete} />
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
  },
];

================
File: src/app/admin/api-endpoints/new/page.tsx
================
import { ApiEndpointForm } from "../_components/form";
import { getWebhookOptions } from "../actions";

export default async function NewApiEndpointPage() {
  const webhookOptions = await getWebhookOptions();

  return (
    <div className="container mx-auto py-10">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">新建API端点</h1>
      </div>
      <div className="rounded-md border p-4">
        <ApiEndpointForm webhookOptions={webhookOptions} />
      </div>
    </div>
  );
}

================
File: src/app/admin/api-endpoints/page.tsx
================
import { getApiEndpoints } from "./actions";
import { columns } from "./columns";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import Link from "next/link";
import PageTable from "@/components/page-table";

export default async function ApiEndpointsPage(props: PageProps) {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">API服务管理</h1>
        <Link href="/admin/api-endpoints/new">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            新建API端点
          </Button>
        </Link>
      </div>
      <PageTable
        basePath="/admin/api-endpoints"
        load={(data) =>
          getApiEndpoints({
            page: data.page,
            pageSize: data.pageSize,
            where: data.keyword
              ? {
                  OR: [
                    { name: { contains: data.keyword } },
                    { description: { contains: data.keyword } },
                    { type: { contains: data.keyword } },
                  ],
                }
              : {},
          })
        }
        columns={columns}
        searchParams={props.searchParams}
      />
    </div>
  );
}

================
File: src/app/admin/api-keys/_components/form.tsx
================
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useRouter } from "next/navigation";
import { ApiKey, ApiEndpoint } from "@prisma/client";
import { createApiKey, updateApiKey } from "../actions";
import { useToast } from "@/hooks/use-toast";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Checkbox } from "@/components/ui/checkbox";

const apiKeyFormSchema = z.object({
  apiEndpointIds: z.array(z.string()).min(1, "请至少选择一个API端点"),
});

type ApiKeyFormValues = z.infer<typeof apiKeyFormSchema>;

interface ApiEndpointOption {
  id: string;
  name: string;
  type: string;
  cozeWebhook: {
    url: string;
    name: string;
  };
}

interface ApiKeyFormProps {
  initialData?: ApiKey & {
    apiEndpoints: ApiEndpoint[];
  };
  apiEndpointOptions: ApiEndpointOption[];
}

export function ApiKeyForm({
  initialData,
  apiEndpointOptions,
}: ApiKeyFormProps) {
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<ApiKeyFormValues>({
    resolver: zodResolver(apiKeyFormSchema),
    defaultValues: {
      apiEndpointIds:
        initialData?.apiEndpoints.map((endpoint) => endpoint.id) || [],
    },
  });

  async function onSubmit(data: ApiKeyFormValues) {
    try {
      if (initialData) {
        await updateApiKey(initialData.id, data);
      } else {
        await createApiKey(data);
      }
      router.push("/admin/api-keys");
      router.refresh();
    } catch (error) {
      toast({
        title: "操作失败",
        description: error instanceof Error ? error.message : "操作失败",
        variant: "destructive",
      });
      console.error("提交失败:", error);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="apiEndpointIds"
          render={() => (
            <FormItem>
              <FormLabel>选择API端点</FormLabel>
              <ScrollArea className="h-72 rounded-md border">
                <div className="space-y-4 p-4">
                  {apiEndpointOptions.map((endpoint) => (
                    <FormField
                      key={endpoint.id}
                      control={form.control}
                      name="apiEndpointIds"
                      render={({ field }) => {
                        return (
                          <FormItem
                            key={endpoint.id}
                            className="flex flex-row items-start space-x-3 space-y-0"
                          >
                            <FormControl>
                              <Checkbox
                                checked={field.value?.includes(endpoint.id)}
                                onCheckedChange={(checked) => {
                                  return checked
                                    ? field.onChange([
                                        ...field.value,
                                        endpoint.id,
                                      ])
                                    : field.onChange(
                                        field.value?.filter(
                                          (value) => value !== endpoint.id
                                        )
                                      );
                                }}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel className="text-sm font-normal">
                                {endpoint.name}
                                <span className="ml-2 text-gray-500">
                                  (
                                  {endpoint.type === "openaiLike"
                                    ? "OpenAI兼容"
                                    : "普通请求"}
                                  )
                                </span>
                              </FormLabel>
                              <p className="text-xs text-gray-500">
                                Webhook: {endpoint.cozeWebhook.name}
                              </p>
                            </div>
                          </FormItem>
                        );
                      }}
                    />
                  ))}
                </div>
              </ScrollArea>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">{initialData ? "更新" : "创建"}</Button>
      </form>
    </Form>
  );
}

================
File: src/app/admin/api-keys/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { ApiKeyForm } from "../_components/form";
import { getApiKey, getApiEndpointOptions } from "../actions";

interface EditApiKeyPageProps {
  params: Promise<{
    id: string;
  }>;
}

export default async function EditApiKeyPage({ params }: EditApiKeyPageProps) {
  const { id } = await params;
  const [apiKey, apiEndpointOptions] = await Promise.all([
    getApiKey(id),
    getApiEndpointOptions(),
  ]);

  if (!apiKey) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">编辑API密钥</h1>
      </div>
      <div className="rounded-md border p-4">
        <ApiKeyForm
          initialData={apiKey}
          apiEndpointOptions={apiEndpointOptions}
        />
      </div>
    </div>
  );
}

================
File: src/app/admin/api-keys/actions.ts
================
"use server";

import { db } from "@/lib/db";
import { revalidatePath } from "next/cache";
import { randomUUID } from "crypto";

// 获取API密钥列表
export async function getApiKeys(
  query: PageableQuery<typeof db.apiKey> = { page: 1, pageSize: 10 }
) {
  const skip = (query.page - 1) * query.pageSize;
  const [total, data] = await Promise.all([
    db.apiKey.count({ where: query.where }),
    db.apiKey.findMany({
      skip,
      take: query.pageSize,
      orderBy: {
        createdAt: "desc",
      },
      where: query.where,
      include: {
        apiEndpoints: {
          include: {
            cozeWebhook: true,
          },
        },
      },
    }),
  ]);

  return {
    data,
    total,
    page: query.page,
    pageSize: query.pageSize,
    totalPages: Math.ceil(total / query.pageSize),
  };
}

// 创建API密钥
export async function createApiKey(data: { apiEndpointIds: string[] }) {
  const apiKey = await db.apiKey.create({
    data: {
      key: `ak-${randomUUID()}`,
      apiEndpoints: {
        connect: data.apiEndpointIds.map((id) => ({ id })),
      },
    },
    include: {
      apiEndpoints: true,
    },
  });
  revalidatePath("/admin/api-keys");
  return apiKey;
}

// 更新API密钥
export async function updateApiKey(
  id: string,
  data: {
    apiEndpointIds: string[];
  }
) {
  const apiKey = await db.apiKey.update({
    where: { id },
    data: {
      apiEndpoints: {
        set: data.apiEndpointIds.map((id) => ({ id })),
      },
    },
    include: {
      apiEndpoints: true,
    },
  });
  revalidatePath("/admin/api-keys");
  return apiKey;
}

// 删除API密钥
export async function deleteApiKey(id: string) {
  await db.apiKey.delete({
    where: { id },
  });
  revalidatePath("/admin/api-keys");
}

// 获取单个API密钥
export async function getApiKey(id: string) {
  return db.apiKey.findUnique({
    where: { id },
    include: {
      apiEndpoints: {
        include: {
          cozeWebhook: true,
        },
      },
    },
  });
}

// 获取完整的API密钥
export async function getFullApiKey(id: string) {
  const apiKey = await db.apiKey.findUnique({
    where: { id },
    select: {
      key: true,
    },
  });

  if (!apiKey) {
    throw new Error("API密钥不存在");
  }

  return apiKey;
}

// 获取API端点选项
export async function getApiEndpointOptions() {
  return db.apiEndpoint.findMany({
    select: {
      id: true,
      name: true,
      type: true,
      cozeWebhook: {
        select: {
          id: true,
          name: true,
          url: true,
        },
      },
    },
    orderBy: {
      createdAt: "desc",
    },
  });
}

================
File: src/app/admin/api-keys/columns.tsx
================
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ApiKey, ApiEndpoint, CozeWebhook } from "@prisma/client";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Copy } from "lucide-react";
import { deleteApiKey } from "./actions";
import Link from "next/link";
import { RemoveButton } from "@/components/remove-button";
import { useToast } from "@/hooks/use-toast";
import { getApiKey } from "./actions";

type ApiKeyWithRelations = ApiKey & {
  apiEndpoints: (ApiEndpoint & {
    cozeWebhook: CozeWebhook;
  })[];
};

const CopyButton = ({ id }: { id: string }) => {
  const { toast } = useToast();
  const copyKey = async () => {
    try {
      const fullKey = await getApiKey(id);
      if (fullKey == null) {
        throw new Error("API密钥不存在");
      }
      await navigator.clipboard.writeText(fullKey?.key);
      toast({
        title: "复制成功",
        description: "API密钥已复制到剪贴板",
      });
    } catch (error) {
      toast({
        title: "复制失败",
        description: error instanceof Error ? error.message : "未知错误",
        variant: "destructive",
      });
    }
  };

  return (
    <Button variant="ghost" size="icon" className="h-8 w-8" onClick={copyKey}>
      <Copy className="h-4 w-4" />
    </Button>
  );
};

export const columns: ColumnDef<ApiKeyWithRelations>[] = [
  {
    accessorKey: "key",
    header: "API密钥",
    cell: ({ row }) => {
      return (
        <div className="flex items-center gap-2">
          <code className="rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold">
            ak-{"*".repeat(30)}
          </code>
          <CopyButton id={row.original.id} />
        </div>
      );
    },
  },
  {
    accessorKey: "apiEndpoints",
    header: "关联的API端点",
    cell: ({ row }) => {
      const apiEndpoints = row.original.apiEndpoints;
      return (
        <div className="space-y-1">
          {apiEndpoints.map((endpoint) => (
            <div key={endpoint.id} className="text-sm">
              <Link
                href={`api-endpoints/${endpoint.id}`}
                className="text-blue-600 hover:underline"
              >
                {endpoint.name}
              </Link>
              <span className="text-gray-500">
                {" "}
                ({endpoint.type === "openaiLike" ? "OpenAI兼容" : "普通请求"})
              </span>
              <div className="text-xs text-gray-500">
                Webhook: {endpoint.cozeWebhook.name}
              </div>
            </div>
          ))}
        </div>
      );
    },
  },
  {
    accessorKey: "createdAt",
    header: "创建时间",
    cell: ({ row }) => {
      return new Date(row.original.createdAt).toLocaleString();
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const apiKey = row.original;
      const handleDelete = async () => {
        if (!confirm("确定要删除这个API密钥吗？")) return;
        await deleteApiKey(apiKey.id);
        window.location.reload();
      };
      return (
        <div className="flex gap-2">
          <Link href={`/admin/api-keys/${apiKey.id}`}>
            <Button className="h-8 py-0" variant={"ghost"}>
              编辑
              <Edit className="h-4 w-4" />
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">打开菜单</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <RemoveButton onDeleteAction={handleDelete} />
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
  },
];

================
File: src/app/admin/api-keys/new/page.tsx
================
import { ApiKeyForm } from "../_components/form";
import { getApiEndpointOptions } from "../actions";

export default async function NewApiKeyPage() {
  const apiEndpointOptions = await getApiEndpointOptions();

  return (
    <div className="container mx-auto py-10">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">新建API密钥</h1>
      </div>
      <div className="rounded-md border p-4">
        <ApiKeyForm apiEndpointOptions={apiEndpointOptions} />
      </div>
    </div>
  );
}

================
File: src/app/admin/api-keys/page.tsx
================
import { getApiKeys } from "./actions";
import { columns } from "./columns";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import Link from "next/link";
import PageTable from "@/components/page-table";

export default async function ApiKeysPage(props: PageProps) {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">API密钥管理</h1>
        <Link href="/admin/api-keys/new">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            新建API密钥
          </Button>
        </Link>
      </div>
      <PageTable
        basePath="/admin/api-keys"
        load={(data) =>
          getApiKeys({
            page: data.page,
            pageSize: data.pageSize,
            where: data.keyword
              ? {
                  key: { contains: data.keyword },
                }
              : {},
          })
        }
        columns={columns}
        searchParams={props.searchParams}
      />
    </div>
  );
}

================
File: src/app/admin/api-logs/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { getApiLog } from "../actions";
import { Badge } from "@/components/ui/badge";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface ApiLogDetailPageProps {
  params: {
    id: string;
  };
}

export default async function ApiLogDetailPage({
  params,
}: ApiLogDetailPageProps) {
  const log = await getApiLog(params.id);

  if (!log) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">API调用日志详情</h1>
      </div>
      <div className="grid gap-6">
        <Card>
          <CardHeader>
            <CardTitle>基本信息</CardTitle>
          </CardHeader>
          <CardContent>
            <dl className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <dt className="text-sm font-medium text-gray-500">API端点</dt>
                <dd className="mt-1">
                  <Link
                    href={`/api-endpoints/${log.apiEndpoint.id}`}
                    className="text-blue-600 hover:underline"
                  >
                    {log.apiEndpoint.name}
                  </Link>
                  <Badge variant="outline" className="ml-2">
                    {log.apiEndpoint.type === "openaiLike"
                      ? "OpenAI兼容"
                      : "普通请求"}
                  </Badge>
                </dd>
              </div>
              <div>
                <dt className="text-sm font-medium text-gray-500">
                  CozeWebhook
                </dt>
                <dd className="mt-1">
                  <Link
                    href={`/webhooks/${log.cozeWebhook.id}`}
                    className="text-blue-600 hover:underline"
                  >
                    {log.cozeWebhook.name}
                  </Link>
                </dd>
              </div>
              <div>
                <dt className="text-sm font-medium text-gray-500">API密钥</dt>
                <dd className="mt-1">
                  <code className="rounded bg-muted px-2 py-1">
                    {log.apiKey}
                  </code>
                </dd>
              </div>
              <div>
                <dt className="text-sm font-medium text-gray-500">调用时间</dt>
                <dd className="mt-1">
                  {new Date(log.createdAt).toLocaleString()}
                </dd>
              </div>
              <div>
                <dt className="text-sm font-medium text-gray-500">耗时</dt>
                <dd className="mt-1">
                  <span
                    className={
                      log.duration > 1000 ? "text-yellow-600" : "text-green-600"
                    }
                  >
                    {log.duration}ms
                  </span>
                </dd>
              </div>
            </dl>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>请求参数</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="whitespace-pre-wrap rounded-lg bg-muted p-4">
              {JSON.stringify(JSON.parse(log.requestParams), null, 2)}
            </pre>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>响应内容</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="whitespace-pre-wrap rounded-lg bg-muted p-4">
              {JSON.stringify(JSON.parse(log.response), null, 2)}
            </pre>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

================
File: src/app/admin/api-logs/actions.ts
================
"use server";

import { db } from "@/lib/db";

// 获取API日志列表
export async function getApiLogs(
  query: PageableQuery<typeof db.apiEndpointLog> = { page: 1, pageSize: 10 }
) {
  const skip = (query.page - 1) * query.pageSize;
  const [total, data] = await Promise.all([
    db.apiEndpointLog.count({ where: query.where }),
    db.apiEndpointLog.findMany({
      skip,
      take: query.pageSize,
      orderBy: {
        createdAt: "desc",
      },
      where: query.where,
      include: {
        apiEndpoint: true,
        cozeWebhook: true,
      },
    }),
  ]);

  return {
    data,
    total,
    page: query.page,
    pageSize: query.pageSize,
    totalPages: Math.ceil(total / query.pageSize),
  };
}

// 获取单个API日志详情
export async function getApiLog(id: string) {
  return db.apiEndpointLog.findUnique({
    where: { id },
    include: {
      apiEndpoint: true,
      cozeWebhook: true,
    },
  });
}

================
File: src/app/admin/api-logs/columns.tsx
================
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ApiEndpointLog, ApiEndpoint, CozeWebhook } from "@prisma/client";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Eye } from "lucide-react";
import { Badge } from "@/components/ui/badge";

type ApiLogWithRelations = ApiEndpointLog & {
  apiEndpoint: ApiEndpoint;
  cozeWebhook: CozeWebhook;
};

export const columns: ColumnDef<ApiLogWithRelations>[] = [
  {
    accessorKey: "apiEndpoint.name",
    header: "API端点",
    cell: ({ row }) => {
      const apiEndpoint = row.original.apiEndpoint;
      return (
        <div>
          <Link
            href={`/api-endpoints/${apiEndpoint.id}`}
            className="text-blue-600 hover:underline"
          >
            {apiEndpoint.name}
          </Link>
          <Badge variant="outline" className="ml-2">
            {apiEndpoint.type === "openaiLike" ? "OpenAI兼容" : "普通请求"}
          </Badge>
        </div>
      );
    },
  },
  {
    accessorKey: "cozeWebhook.url",
    header: "Webhook",
    cell: ({ row }) => {
      const webhook = row.original.cozeWebhook;
      return (
        <Link
          href={`/webhooks/${webhook.id}`}
          className="text-blue-600 hover:underline"
        >
          {webhook.name}
        </Link>
      );
    },
  },
  {
    accessorKey: "apiKey",
    header: "API密钥",
    cell: ({ row }) => {
      return (
        <code className="rounded bg-muted px-2 py-1 text-sm">
          {row.original.apiKey}
        </code>
      );
    },
  },
  {
    accessorKey: "duration",
    header: "耗时",
    cell: ({ row }) => {
      const duration = row.original.duration;
      if (duration == null) {
        return <span className="text-muted-foreground">--ms</span>;
      }
      return (
        <span
          className={duration > 1000 ? "text-yellow-600" : "text-green-600"}
        >
          {duration}ms
        </span>
      );
    },
  },
  {
    accessorKey: "createdAt",
    header: "调用时间",
    cell: ({ row }) => {
      return new Date(row.original.createdAt).toLocaleString();
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const log = row.original;
      return (
        <Link href={`api-logs/${log.id}`}>
          <Button className="h-8 py-0" variant={"ghost"}>
            查看详情
            <Eye className="ml-2 h-4 w-4" />
          </Button>
        </Link>
      );
    },
  },
];

================
File: src/app/admin/api-logs/page.tsx
================
import { getApiLogs } from "./actions";
import { columns } from "./columns";
import PageTable from "@/components/page-table";

export default async function ApiLogsPage(props: PageProps) {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">API调用日志</h1>
      </div>
      <PageTable
        basePath="/api-logs"
        load={(data) =>
          getApiLogs({
            page: data.page,
            pageSize: data.pageSize,
            where: data.keyword
              ? {
                  OR: [
                    { apiKey: { contains: data.keyword } },
                    { requestParams: { contains: data.keyword } },
                    { response: { contains: data.keyword } },
                  ],
                }
              : {},
          })
        }
        columns={columns}
        searchParams={props.searchParams}
      />
    </div>
  );
}

================
File: src/app/admin/dashboard/_components/new-users.tsx
================
"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { User } from "@prisma/client";
import { formatDistanceToNow } from "date-fns";
import { zhCN } from "date-fns/locale";

interface NewUsersProps {
  users: User[];
}

export function NewUsers({ users }: NewUsersProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>今日新增用户</CardTitle>
        <CardDescription>今天新注册的用户列表</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {users.length === 0 ? (
          <p className="py-4 text-center text-sm text-muted-foreground">
            今天还没有新用户注册
          </p>
        ) : (
          users.map((user) => (
            <div
              key={user.id}
              className="flex items-center gap-4 rounded-lg border p-4"
            >
              <Avatar>
                <AvatarImage src={user.avatar ?? ""} />
                <AvatarFallback className="bg-primary/10">
                  {user.name?.[0] ?? "U"}
                </AvatarFallback>
              </Avatar>
              <div className="flex-1 space-y-1">
                <p className="text-sm font-medium leading-none">{user.name}</p>
                <p className="text-sm text-muted-foreground">{user.email}</p>
              </div>
              <p className="text-sm text-muted-foreground">
                {formatDistanceToNow(user.createdAt, {
                  addSuffix: true,
                  locale: zhCN,
                })}
              </p>
            </div>
          ))
        )}
      </CardContent>
    </Card>
  );
}

================
File: src/app/admin/dashboard/_components/welcome.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { auth } from "@/lib/auth";
import { getGreeting } from "@/lib/utils";

export async function Welcome() {
  const session = await auth();
  const greeting = getGreeting();

  if (!session?.user) return null;

  return (
    <div className="mb-8 flex items-center gap-4">
      <Avatar className="h-16 w-16">
        <AvatarImage src={session.user.image ?? ""} />
        <AvatarFallback className="bg-primary/10">
          {session.user.name?.[0] ?? "U"}
        </AvatarFallback>
      </Avatar>
      <div>
        <h2 className="text-2xl font-bold tracking-tight">
          {greeting}，{session.user.name}
        </h2>
        <p className="text-muted-foreground">欢迎回到工作台，祝您工作愉快！</p>
      </div>
    </div>
  );
}

================
File: src/app/admin/dashboard/page.tsx
================
import { db } from "@/lib/db";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Webhook, WebhookOff, Loader2 } from "lucide-react";
import { formatDistanceToNow } from "date-fns";
import { zhCN } from "date-fns/locale";

async function getStats() {
  const [
    totalWebhooks,
    totalApiEndpoints,
    totalApiKeys,
    totalLogs,
    recentLogs,
    endpointStats,
  ] = await Promise.all([
    db.cozeWebhook.count(),
    db.apiEndpoint.count(),
    db.apiKey.count(),
    db.apiEndpointLog.count(),
    db.apiEndpointLog.findMany({
      take: 5,
      orderBy: {
        createdAt: "desc",
      },
      include: {
        apiEndpoint: true,
      },
    }),
    db.apiEndpoint.findMany({
      select: {
        id: true,
        name: true,
        _count: {
          select: {
            logs: true,
          },
        },
      },
      orderBy: {
        logs: {
          _count: "desc",
        },
      },
      take: 5,
    }),
  ]);

  // 计算平均响应时间
  const avgDuration = await db.apiEndpointLog.aggregate({
    _avg: {
      duration: true,
    },
  });

  return {
    totalWebhooks,
    totalApiEndpoints,
    totalApiKeys,
    totalLogs,
    recentLogs,
    endpointStats,
    avgDuration: Math.round(avgDuration._avg.duration || 0),
  };
}

export default async function DashboardPage() {
  const stats = await getStats();

  return (
    <div className="container mx-auto py-10">
      <h1 className="mb-8 text-2xl font-bold">仪表盘</h1>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Webhook总数</CardTitle>
            <Webhook className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalWebhooks}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">API端点总数</CardTitle>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              className="h-4 w-4 text-muted-foreground"
            >
              <path d="M4 21v-7a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v7" />
              <path d="M7 21h10" />
              <path d="M12 17v-6" />
              <path d="M12 7a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z" />
            </svg>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalApiEndpoints}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">API密钥总数</CardTitle>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              className="h-4 w-4 text-muted-foreground"
            >
              <path d="M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" />
            </svg>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalApiKeys}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">平均响应时间</CardTitle>
            <Loader2 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.avgDuration}ms</div>
          </CardContent>
        </Card>
      </div>

      <div className="mt-4 grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Card className="col-span-4">
          <CardHeader>
            <CardTitle>最近调用记录</CardTitle>
            <CardDescription>显示最近5条API调用记录</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-8">
              {stats.recentLogs.map((log) => (
                <div key={log.id} className="flex items-center">
                  <div className="ml-4 space-y-1">
                    <p className="text-sm font-medium leading-none">
                      {log.apiEndpoint.name}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      调用时间：
                      {formatDistanceToNow(new Date(log.createdAt), {
                        addSuffix: true,
                        locale: zhCN,
                      })}
                      {" · "}
                      耗时：{log.duration}ms
                    </p>
                  </div>
                  {log.duration > 1000 && (
                    <WebhookOff className="ml-auto h-4 w-4 text-yellow-500" />
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
        <Card className="col-span-3">
          <CardHeader>
            <CardTitle>调用量TOP5的API端点</CardTitle>
            <CardDescription>按调用次数排序的前5个API端点</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-8">
              {stats.endpointStats.map((endpoint) => (
                <div key={endpoint.id} className="flex items-center">
                  <div className="ml-4 space-y-1">
                    <p className="text-sm font-medium leading-none">
                      {endpoint.name}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      调用次数：{endpoint._count.logs}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

================
File: src/app/admin/layout.tsx
================
import type { Metadata } from "next";
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/app-sidebar";

export const metadata: Metadata = {
  title: "扣子服务管理系统",
  description: "一键管理扣子webhook服务-后台管理系统",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <SidebarProvider>
      <AppSidebar />
      <main className="w-full p-5">
        <div className="mb-2">
          <SidebarTrigger />
        </div>
        <div className="bg-background/15">{children}</div>
      </main>
    </SidebarProvider>
  );
}

================
File: src/app/admin/loading.tsx
================
import { Skeleton } from "@/components/ui/skeleton";

export default function Loading() {
  return (
    <div className="container mx-auto p-8 animate-in fade-in-50">
      {/* 页面标题骨架 */}
      <div className="mb-8 flex items-center justify-between">
        <Skeleton className="h-8 w-48" />
        <Skeleton className="h-10 w-32" />
      </div>

      {/* 卡片列表骨架 */}
      <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
        {Array.from({ length: 6 }).map((_, i) => (
          <div
            key={i}
            className="group relative overflow-hidden rounded-lg border bg-background p-2"
          >
            {/* 卡片图片骨架 */}
            <Skeleton className="aspect-video w-full rounded-md" />

            {/* 卡片内容骨架 */}
            <div className="space-y-4 p-4">
              <div className="space-y-2">
                <Skeleton className="h-5 w-3/4" />
                <Skeleton className="h-4 w-1/2" />
              </div>

              {/* 标签骨架 */}
              <div className="flex flex-wrap gap-2">
                <Skeleton className="h-6 w-16 rounded-full" />

                <Skeleton className="h-6 w-20 rounded-full" />

                <Skeleton className="h-6 w-14 rounded-full" />
              </div>

              {/* 描述骨架 */}
              <div className="space-y-2">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-5/6" />
                <Skeleton className="h-4 w-4/6" />
              </div>

              {/* 底部信息骨架 */}
              <div className="flex items-center justify-between pt-2">
                <Skeleton className="h-5 w-24" />
                <Skeleton className="h-8 w-8 rounded-full" />
              </div>
            </div>

            {/* Sketch 风格装饰 */}
            <div className="pointer-events-none absolute inset-0">
              <div className="absolute inset-0 bg-gradient-to-t from-background/10 to-background/5 opacity-0 transition-opacity group-hover:opacity-100" />

              <div className="absolute -inset-px rounded-lg border border-foreground/10" />

              <div className="absolute -inset-[2px] rounded-lg border border-foreground/5 opacity-0 transition-opacity group-hover:opacity-100" />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: src/app/admin/menus/_components/menu-form.tsx
================
"use client";
import React, { useState, useEffect } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import { Menu } from "@prisma/client";
import { createMenu, updateMenu, fetchMenus } from "../actions";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";

const menuFormSchema = z.object({
  name: z.string().min(1, "菜单名称不能为空"),
  url: z.string().min(1, "URL不能为空"),
  orderNum: z.number().min(0, "排序号必须大于等于0"),
  parentId: z.string().nullable(),
  icon: z.string().optional().nullable(),
});

type MenuFormValues = z.infer<typeof menuFormSchema>;

interface MenuFormProps {
  initialData?: Menu;
}

export function MenuForm({ initialData }: MenuFormProps) {
  const router = useRouter();
  const [menus, setMenus] = useState<Menu[]>([]);
  const { toast } = useToast();

  useEffect(() => {
    const loadMenus = async () => {
      const data = await fetchMenus();
      setMenus(data);
    };
    loadMenus();
  }, []);

  const form = useForm<MenuFormValues>({
    resolver: zodResolver(menuFormSchema),
    defaultValues: initialData || {
      name: "",
      url: "",
      orderNum: 0,
      parentId: null,
      icon: "",
    },
  });

  async function onSubmit(data: MenuFormValues) {
    try {
      if (initialData) {
        await updateMenu(initialData.id, data);
      } else {
        await createMenu(data);
      }
      router.push("/menus");
      router.refresh();
    } catch (error) {
      toast({
        title: "操作失败",
        description: error instanceof Error ? error.message : "操作失败",
        variant: "destructive",
      });
      console.error("提交失败:", error);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>菜单名称</FormLabel>
              <FormControl>
                <Input placeholder="请输入菜单名称" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="url"
          render={({ field }) => (
            <FormItem>
              <FormLabel>URL</FormLabel>
              <FormControl>
                <Input placeholder="请输入URL" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="orderNum"
          render={({ field }) => (
            <FormItem>
              <FormLabel>排序号</FormLabel>
              <FormControl>
                <Input
                  type="number"
                  placeholder="请输入排序号"
                  {...field}
                  onChange={(e) => field.onChange(parseInt(e.target.value))}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="parentId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>父菜单</FormLabel>
              <FormControl>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value!}
                  value={field.value!}
                >
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="选择父菜单" />
                  </SelectTrigger>
                  <SelectContent>
                    {menus.map((menu) => (
                      <SelectItem key={menu.id} value={menu.id}>
                        {menu.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="icon"
          render={({ field }) => (
            <FormItem>
              <FormLabel>图标</FormLabel>
              <FormControl>
                <Input
                  placeholder="请输入图标"
                  {...field}
                  value={field.value!}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">{initialData ? "更新" : "创建"}</Button>
      </form>
    </Form>
  );
}

================
File: src/app/admin/menus/_components/remove-button.tsx
================
import {
  AlertDialogHeader,
  AlertDialogFooter,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogCancel,
  AlertDialogAction,
} from "@/components/ui/alert-dialog";
import { Trash2 } from "lucide-react";

export function RemoveButton(props: { onDeleteAction: () => void }) {
  const { onDeleteAction } = props;
  return (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button className="w-full justify-start  text-red-400" variant="ghost">
          <Trash2 className="mr-2 h-4 w-4" />
          删除
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>确认删除</AlertDialogTitle>
          <AlertDialogDescription>
            此操作无法撤销，确定要删除吗？
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>取消</AlertDialogCancel>
          <AlertDialogAction onClick={onDeleteAction}>删除</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

================
File: src/app/admin/menus/[id]/page.tsx
================
import { Metadata } from "next";
import { MenuForm } from "../_components/menu-form";
import { notFound } from "next/navigation";
import { MenuService } from "@/service/menu.service";

export const metadata: Metadata = {
  title: "编辑菜单",
  description: "编辑系统菜单",
};

export default async function EditMenuPage({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = await params;
  const menu = await MenuService.getMenuById(id);

  if (!menu) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="mb-4 text-2xl font-bold">编辑菜单</h1>
      <MenuForm initialData={menu} />
    </div>
  );
}

================
File: src/app/admin/menus/actions.ts
================
"use server";
import { MenuService } from "@/service/menu.service";
import { revalidatePath } from "next/cache";

export async function getMenus(
  ...args: Parameters<typeof MenuService.getMenus>
) {
  return MenuService.getMenus(...args);
}

export async function createMenu(data: {
  name: string;
  url: string;
  orderNum: number;
  parentId?: string | null;
  icon?: string | null;
  permissionIds?: string[];
}) {
  await MenuService.createMenu(
    data.name,
    data.url,
    data.orderNum,
    data.parentId,
    data.icon,
    data.permissionIds
  );
  revalidatePath("/menus");
  return { success: true };
}

export async function updateMenu(
  menuId: string,
  data: {
    name?: string;
    url?: string;
    orderNum?: number;
    parentId?: string | null;
    icon?: string | null;
    permissionIds?: string[];
  }
) {
  await MenuService.updateMenu(menuId, data);
  revalidatePath("/menus");
  return { success: true };
}

export async function deleteMenu(menuId: string) {
  await MenuService.deleteMenu(menuId);
  revalidatePath("/menus");
  return { success: true };
}

export async function fetchMenus() {
  return MenuService.list();
}

================
File: src/app/admin/menus/columns.tsx
================
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { Menu } from "@prisma/client";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit } from "lucide-react";
import { deleteMenu } from "./actions";
import Link from "next/link";
import { RemoveButton } from "./_components/remove-button";

export const columns: ColumnDef<Menu>[] = [
  {
    accessorKey: "name",
    header: "菜单名称",
  },
  {
    accessorKey: "url",
    header: "URL",
  },
  {
    accessorKey: "orderNum",
    header: "排序",
  },
  {
    accessorKey: "icon",
    header: "图标",
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const menu = row.original;
      const handleDelete = async () => {
        if (!confirm("确定要删除这个菜单吗？")) return;
        await deleteMenu(menu.id);
        window.location.reload();
      };
      return (
        <div className="flex gap-2">
          <Link href={`/menus/${menu.id}`}>
            <Button className="h-8 py-0" variant={"ghost"}>
              编辑
              <Edit className="h-4 w-4" />
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">打开菜单</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <RemoveButton onDeleteAction={handleDelete} />
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
  },
];

================
File: src/app/admin/menus/new/page.tsx
================
import { Metadata } from "next";
import { MenuForm } from "../_components/menu-form";

export const metadata: Metadata = {
  title: "新建菜单",
  description: "创建新的系统菜单",
};

export default function NewMenuPage() {
  return (
    <div className="container mx-auto py-10">
      <h1 className="mb-4 text-2xl font-bold">新建菜单</h1>
      <MenuForm />
    </div>
  );
}

================
File: src/app/admin/menus/page.tsx
================
import { getMenus } from "./actions";
import { columns } from "./columns";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import Link from "next/link";
import PageTable from "@/components/page-table";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "菜单",
  description: "菜单管理",
};

export default async function MenuPage(props: PageProps) {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">菜单管理</h1>
        <Link href="/menus/new">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            新建菜单
          </Button>
        </Link>
      </div>
      <PageTable
        basePath="/menus"
        load={getMenus}
        columns={columns}
        searchParams={props.searchParams}
      />
    </div>
  );
}

================
File: src/app/admin/permissions/_components/permission-form.tsx
================
"use client";

import React from "react";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useRouter } from "next/navigation";
import { Permission } from "@prisma/client";
import { createPermission, updatePermission } from "../actions";
import { useToast } from "@/hooks/use-toast";
import { PermissionFormValues, permissionResolver } from "./schema";
import { PermissionSelect } from "./permission-select";

interface PermissionFormProps {
  initialData?: Permission;
}

export function PermissionForm({ initialData }: PermissionFormProps) {
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<PermissionFormValues>({
    resolver: permissionResolver,
    mode: "onBlur",
    defaultValues: initialData || {
      name: "",
      key: "",
      description: "",
      parentId: null,
    },
  });

  async function onSubmit(data: PermissionFormValues) {
    try {
      if (initialData) {
        await updatePermission(initialData.id, data);
      } else {
        await createPermission(data);
      }
      router.push("/permissions");
      router.refresh();
    } catch (error) {
      toast({
        title: "操作失败",
        description: error instanceof Error ? error.message : "操作失败",
        variant: "destructive",
      });
      console.error("提交失败:", error);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>权限名称</FormLabel>
              <FormControl>
                <Input placeholder="请输入权限名称" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="key"
          render={({ field }) => (
            <FormItem>
              <FormLabel>权限键</FormLabel>
              <FormControl>
                <Input placeholder="请输入权限键" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>描述</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="请输入权限描述"
                  {...field}
                  value={field.value || ""}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="parentId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>父权限</FormLabel>
              <FormControl>
                <PermissionSelect
                  onChange={field.onChange}
                  defaultValue={field.value!}
                  value={field.value!}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit">{initialData ? "更新" : "创建"}</Button>
      </form>
    </Form>
  );
}

================
File: src/app/admin/permissions/_components/permission-select.tsx
================
"use client";

import { Permission } from "@prisma/client";
import { useEffect, useState } from "react";
import { fetchPermissions } from "../actions";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface PermissionSelectProps {
  value: string | null;
  defaultValue?: string | null;
  onChange: (value: string | null) => void;
}

export function PermissionSelect({
  value,
  defaultValue,
  onChange,
}: PermissionSelectProps) {
  const [permissions, setPermissions] = useState<Permission[]>([]);

  useEffect(() => {
    const loadPermissions = async () => {
      const data = await fetchPermissions();
      setPermissions(data);
    };
    loadPermissions();
  }, []);

  return (
    <Select
      onValueChange={onChange}
      defaultValue={defaultValue ?? undefined}
      value={value ?? undefined}
    >
      <SelectTrigger className="w-full">
        <SelectValue placeholder="选择父权限" />
      </SelectTrigger>
      <SelectContent>
        {permissions.map((perm) => (
          <SelectItem key={perm.id} value={perm.id}>
            {perm.name}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}

================
File: src/app/admin/permissions/_components/remove-button.tsx
================
import {
  AlertDialogHeader,
  AlertDialogFooter,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogCancel,
  AlertDialogAction,
} from "@/components/ui/alert-dialog";
import { Trash2 } from "lucide-react";

export function RemoveButton(props: { onDeleteAction: () => void }) {
  const { onDeleteAction } = props;
  return (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button className="w-full justify-start  text-red-400" variant="ghost">
          <Trash2 className="mr-2 h-4 w-4" />
          删除
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>确认删除</AlertDialogTitle>
          <AlertDialogDescription>
            此操作无法撤销，确定要删除吗？
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>取消</AlertDialogCancel>
          <AlertDialogAction onClick={onDeleteAction}>删除</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

================
File: src/app/admin/permissions/_components/schema.ts
================
import { zodResolver } from "@hookform/resolvers/zod";

import * as z from "zod";

export const permissionFormSchema = z.object({
  name: z.string().min(1, "权限名称不能为空"),
  key: z.string().min(1, "权限键不能为空"),
  description: z.string().optional().nullable(),
  parentId: z.string().nullable(), // 新增的字段
});

export type PermissionFormValues = z.infer<typeof permissionFormSchema>;

export const permissionResolver = zodResolver(permissionFormSchema);

================
File: src/app/admin/permissions/[id]/page.tsx
================
import { Metadata } from "next";
import { PermissionForm } from "../_components/permission-form";
import { notFound } from "next/navigation";
import { PermissionService } from "@/service/permission.service";

export const metadata: Metadata = {
  title: "编辑权限",
  description: "编辑系统权限",
};

export default async function EditPermissionPage({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = await params;
  const permission = await PermissionService.getPermissionById(id);

  if (!permission) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="mb-4 text-2xl font-bold">编辑权限</h1>
      <PermissionForm initialData={permission} />
    </div>
  );
}

================
File: src/app/admin/permissions/actions.ts
================
"use server";

import { PermissionService } from "@/service/permission.service";
import { revalidatePath } from "next/cache";

export async function getPermissions(
  ...args: Parameters<typeof PermissionService.getPermissions>
) {
  return PermissionService.getPermissions(...args);
}

export async function createPermission(data: {
  name: string;
  key: string;
  description?: string | null;
}) {
  await PermissionService.createPermission(
    data.name,
    data.key,
    data.description
  );
  revalidatePath("/permissions");
  return { success: true };
}

export async function updatePermission(
  permissionId: string,
  data: {
    name?: string;
    description?: string | null;
    key?: string;
  }
) {
  await PermissionService.updatePermission(permissionId, data);
  revalidatePath("/permissions");
  return { success: true };
}

export async function deletePermission(permissionId: string) {
  await PermissionService.deletePermission(permissionId);
  revalidatePath("/permissions");
  return { success: true };
}

// fetchPermissions
export async function fetchPermissions() {
  return PermissionService.list();
}

================
File: src/app/admin/permissions/columns.tsx
================
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { Permission } from "@prisma/client";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit } from "lucide-react";
import { deletePermission } from "./actions";
import Link from "next/link";
import { RemoveButton } from "./_components/remove-button";

export const columns: ColumnDef<Permission>[] = [
  {
    accessorKey: "name",
    header: "权限名称",
  },
  {
    accessorKey: "key",
    header: "权限键",
  },
  {
    accessorKey: "description",
    header: "描述",
  },
  {
    accessorKey: "createdAt",
    header: "创建时间",
    cell: ({ row }) => {
      return new Date(row.original.createdAt).toLocaleString();
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const permission = row.original;
      const handleDelete = async () => {
        if (!confirm("确定要删除这个权限吗？")) return;
        await deletePermission(permission.id);
        window.location.reload();
      };
      return (
        <div className="flex gap-2">
          <Link href={`/permissions/${permission.id}`}>
            <Button className="h-8 py-0" variant={"ghost"}>
              编辑
              <Edit className="h-4 w-4" />
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">打开菜单</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <RemoveButton onDeleteAction={handleDelete} />
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
  },
];

================
File: src/app/admin/permissions/new/drawer.tsx
================
"use client";

import * as React from "react";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { PermissionForm } from "../_components/permission-form";

export function PermissionsDrawer() {
  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="outline">新建权限</Button>
      </SheetTrigger>
      <SheetContent side="right">
        <div className="w-full max-w-sm">
          <SheetHeader>
            <SheetTitle>新建权限</SheetTitle>
            <SheetDescription>创建一个新的权限</SheetDescription>
          </SheetHeader>
          <div className="mt-4">
            <PermissionForm />
          </div>
        </div>
      </SheetContent>
    </Sheet>
  );
}

================
File: src/app/admin/permissions/new/page.tsx
================
import { Metadata } from "next";
import { PermissionForm } from "../_components/permission-form";

export const metadata: Metadata = {
  title: "新建权限",
  description: "创建新的系统权限",
};

export default function NewPermissionPage() {
  return (
    <div className="container mx-auto py-10">
      <h1 className="mb-4 text-2xl font-bold">新建权限</h1>
      <PermissionForm />
    </div>
  );
}

================
File: src/app/admin/permissions/page.tsx
================
import { columns } from "./columns";
import PageTable from "@/components/page-table";
import { Metadata } from "next";
import { PermissionService } from "@/service/permission.service";
import { PermissionsDrawer } from "./new/drawer";

export const metadata: Metadata = {
  title: "权限管理",
  description: "管理系统权限",
};
export default async function PermissionPage(props: PageProps) {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">权限管理</h1>
        <PermissionsDrawer />
      </div>
      <PageTable
        basePath="/permissions"
        load={PermissionService.getPermissions}
        columns={columns}
        searchParams={props.searchParams}
      />
    </div>
  );
}

================
File: src/app/admin/profile/_components/form.tsx
================
"use client";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { useToast } from "@/hooks/use-toast";
import { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { PencilIcon } from "lucide-react";
import { changePassword, updateProfile } from "../actions";
import type { Admin } from "@prisma/client";
import { ADMIN_ROLE, ADMIN_ROLE_NAME } from "@/service/enum/ADMIN_ROLE";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

const nicknameFormSchema = z.object({
  nickname: z.string().min(2, {
    message: "昵称至少需要2个字符",
  }),
});

const passwordFormSchema = z.object({
  oldPassword: z.string().min(6, {
    message: "密码至少需要6个字符",
  }),
  newPassword: z.string().min(6, {
    message: "密码至少需要6个字符",
  }),
});

export function ProfileForm(props: { user: Admin }) {
  const { user } = props;
  const { toast } = useToast();
  const [isEditNickname, setIsEditNickname] = useState(false);

  const nicknameForm = useForm<z.infer<typeof nicknameFormSchema>>({
    resolver: zodResolver(nicknameFormSchema),
    defaultValues: {
      nickname: user?.nickname || "",
    },
  });

  const passwordForm = useForm<z.infer<typeof passwordFormSchema>>({
    resolver: zodResolver(passwordFormSchema),
    defaultValues: {
      oldPassword: "",
      newPassword: "",
    },
  });

  useEffect(() => {
    if (user?.nickname) {
      nicknameForm.setValue("nickname", user.nickname);
    }
  }, [nicknameForm, user.nickname]);

  async function onSubmitNickname(values: z.infer<typeof nicknameFormSchema>) {
    try {
      const result = await updateProfile({ nickname: values.nickname });
      if (!result?.success) {
        toast({
          variant: "destructive",
          title: "修改失败",
          description: "请稍后重试",
        });
      }
      toast({
        title: "修改成功",
        description: "昵称已更新",
      });
      setIsEditNickname(false);
    } catch (_error) {
      toast({
        variant: "destructive",
        title: "修改失败",
        description: "请稍后重试",
      });
    }
  }

  async function onSubmitPassword(values: z.infer<typeof passwordFormSchema>) {
    try {
      const result = await changePassword({
        oldPassword: values.oldPassword,
        newPassword: values.newPassword,
      });
      if (!result?.success) {
        throw new Error();
      }
      toast({
        title: "修改成功",
        description: "密码已更新",
      });
      passwordForm.reset();
    } catch (_error) {
      toast({
        variant: "destructive",
        title: "修改失败",
        description: "请检查原密码是否正确",
      });
    }
  }

  return (
    <div className="space-y-8">
      <Card>
        <CardContent>
          <CardHeader className="hidden"></CardHeader>
          <div className="flex items-center space-x-4 pt-4">
            <Avatar className="h-20 w-20">
              <AvatarImage src={user?.avatar || ""} />
              <AvatarFallback>{user?.nickname?.[0]}</AvatarFallback>
            </Avatar>
            <div className="space-y-1">
              <div className="flex items-center space-x-2">
                <h3 className="text-2xl font-semibold">{user?.nickname}</h3>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => setIsEditNickname(true)}
                >
                  <PencilIcon className="h-4 w-4" />
                </Button>
              </div>
              <p className="text-sm text-muted-foreground">{user.email}</p>
              <p className="text-sm text-muted-foreground">
                角色: {ADMIN_ROLE_NAME[user.role as ADMIN_ROLE]}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardContent className="">
          <CardHeader>
            <CardTitle>修改密码</CardTitle>
          </CardHeader>
          <Form {...passwordForm}>
            <form
              onSubmit={passwordForm.handleSubmit(onSubmitPassword)}
              className="space-y-4"
            >
              <FormField
                control={passwordForm.control}
                name="oldPassword"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>原密码</FormLabel>
                    <FormControl>
                      <Input type="password" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={passwordForm.control}
                name="newPassword"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>新密码</FormLabel>
                    <FormControl>
                      <Input type="password" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <Button type="submit">修改密码</Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      <Dialog open={isEditNickname} onOpenChange={setIsEditNickname}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>修改昵称</DialogTitle>
          </DialogHeader>
          <Form {...nicknameForm}>
            <form
              onSubmit={nicknameForm.handleSubmit(onSubmitNickname)}
              className="space-y-4"
            >
              <FormField
                control={nicknameForm.control}
                name="nickname"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>昵称</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <Button type="submit">保存</Button>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  );
}

================
File: src/app/admin/profile/actions.ts
================
"use server";
import { auth } from "@/lib/auth";
import { AdminService } from "@/service/admin.service";
import { revalidatePath } from "next/cache";

export async function updateProfile({ nickname }: { nickname: string }) {
  const session = await auth();
  if (!session?.user?.id) return;
  const adminId = session.user.id;
  await AdminService.changeNickname(adminId, nickname);
  revalidatePath("/admin/profile");
  return { success: true };
}

export async function changePassword({
  oldPassword,
  newPassword,
}: {
  oldPassword: string;
  newPassword: string;
}) {
  const session = await auth();
  if (!session?.user?.id) return;
  const adminId = session.user.id;
  await AdminService.changePassword(adminId, oldPassword, newPassword);
  return { success: true };
}

================
File: src/app/admin/profile/loading.tsx
================
export { SkeletonForm as default } from "@/components/skeleton/form";

================
File: src/app/admin/profile/page.tsx
================
import { Metadata } from "next";
import { ProfileForm } from "./_components/form";
import { auth } from "@/lib/auth";
import { notFound } from "next/navigation";
import { AdminService } from "@/service/admin.service";

export const metadata: Metadata = {
  title: "个人信息",
};

export default async function ProfilePage() {
  const session = await auth();
  if (!session?.user?.id) {
    return notFound();
  }
  const admin = await AdminService.getAdmin(session.user.id);
  if (!admin) {
    return notFound();
  }
  return (
    <div className="flex-1 space-y-4 p-8 pt-6">
      <div className="flex items-center justify-between space-y-2">
        <h2 className="text-3xl font-bold tracking-tight">个人信息</h2>
      </div>
      <div className="grid gap-4">
        <ProfileForm user={admin} />
      </div>
    </div>
  );
}

================
File: src/app/admin/roles/_components/remove-button.tsx
================
import {
  AlertDialogHeader,
  AlertDialogFooter,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogCancel,
  AlertDialogAction,
} from "@/components/ui/alert-dialog";
import { Trash2 } from "lucide-react";

export function RemoveButton(props: { onDeleteAction: () => void }) {
  const { onDeleteAction } = props;
  return (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button className="w-full justify-start  text-red-400" variant="ghost">
          <Trash2 className="mr-2 h-4 w-4" />
          删除
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>确认删除</AlertDialogTitle>
          <AlertDialogDescription>
            此操作无法撤销，确定要删除吗？
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>取消</AlertDialogCancel>
          <AlertDialogAction onClick={onDeleteAction}>删除</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

================
File: src/app/admin/roles/_components/role-form.tsx
================
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useRouter } from "next/navigation";
import { Role } from "@prisma/client";
import { createRole, updateRole } from "../actions";

const roleFormSchema = z.object({
  name: z.string().min(1, "角色名称不能为空"),
  description: z.string().optional(),
});

type RoleFormValues = z.infer<typeof roleFormSchema>;

interface RoleFormProps {
  initialData?: Role;
}

export function RoleForm({ initialData }: RoleFormProps) {
  const router = useRouter();
  const form = useForm<RoleFormValues>({
    resolver: zodResolver(roleFormSchema),
    defaultValues: initialData || {
      name: "",
      description: "",
    },
  });

  async function onSubmit(data: RoleFormValues) {
    try {
      if (initialData) {
        await updateRole(initialData.id, data);
      } else {
        await createRole(data);
      }
      router.push("/roles");
      router.refresh();
    } catch (error) {
      console.error("提交失败:", error);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>角色名称</FormLabel>
              <FormControl>
                <Input placeholder="请输入角色名称" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>描述</FormLabel>
              <FormControl>
                <Textarea placeholder="请输入角色描述" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">{initialData ? "更新" : "创建"}</Button>
      </form>
    </Form>
  );
}

================
File: src/app/admin/roles/[id]/page.tsx
================
import { Metadata } from "next";
import { RoleForm } from "../_components/role-form";
import { notFound } from "next/navigation";
import { RoleService } from "@/service/role.service";

export const metadata: Metadata = {
  title: "编辑角色",
  description: "编辑系统角色",
};

export default async function EditRolePage({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = await params;
  const role = await RoleService.getRoleById(id);

  if (!role) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="mb-4 text-2xl font-bold">编辑角色</h1>
      <RoleForm initialData={role} />
    </div>
  );
}

================
File: src/app/admin/roles/actions.ts
================
"use server";

import { RoleService } from "@/service/role.service";
import { revalidatePath } from "next/cache";

export async function getRoles(
  ...args: Parameters<typeof RoleService.getRoles>
) {
  return RoleService.getRoles(...args);
}

export async function createRole(data: { name: string; description?: string }) {
  try {
    await RoleService.createRole(data);
    revalidatePath("/roles");
    return { success: true };
  } catch (_error) {
    throw new Error("创建角色失败");
  }
}

export async function updateRole(
  roleId: string,
  data: {
    name?: string;
    description?: string;
  }
) {
  try {
    await RoleService.updateRole(roleId, data);
    revalidatePath("/roles");
    return { success: true };
  } catch (_error) {
    throw new Error("更新角色失败");
  }
}

export async function deleteRole(roleId: string) {
  try {
    await RoleService.deleteRole(roleId);
    revalidatePath("/roles");
    return { success: true };
  } catch (_error) {
    throw new Error("删除角色失败");
  }
}

================
File: src/app/admin/roles/columns.tsx
================
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { Role } from "@prisma/client";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit } from "lucide-react";
import { deleteRole } from "./actions";
import Link from "next/link";
import { RemoveButton } from "./_components/remove-button";

export const columns: ColumnDef<Role>[] = [
  {
    accessorKey: "name",
    header: "角色名称",
  },
  {
    accessorKey: "description",
    header: "描述",
  },
  {
    accessorKey: "createdAt",
    header: "创建时间",
    cell: ({ row }) => {
      return new Date(row.original.createdAt).toLocaleString();
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const role = row.original;
      const handleDelete = async () => {
        if (!confirm("确定要删除这个角色吗？")) return;
        await deleteRole(role.id);
        window.location.reload();
      };
      return (
        <div className="flex gap-2">
          <Link href={`/roles/${role.id}`}>
            <Button className="h-8 py-0" variant={"ghost"}>
              编辑
              <Edit className="h-4 w-4" />
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">打开菜单</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <RemoveButton onDeleteAction={handleDelete} />
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
  },
];

================
File: src/app/admin/roles/new/page.tsx
================
import { Metadata } from "next";
import { RoleForm } from "../_components/role-form";

export const metadata: Metadata = {
  title: "新建角色",
  description: "创建新的系统角色",
};

export default function NewRolePage() {
  return (
    <div className="container mx-auto py-10">
      <h1 className="mb-4 text-2xl font-bold">新建角色</h1>
      <RoleForm />
    </div>
  );
}

================
File: src/app/admin/roles/page.tsx
================
import { columns } from "./columns";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import Link from "next/link";
import PageTable from "@/components/page-table";
import { Metadata } from "next";
import { RoleService } from "@/service/role.service";
export const metadata: Metadata = {
  title: "角色管理",
  description: "管理系统角色和权限",
};
export default async function RolesPage(props: PageProps) {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">角色管理</h1>
        <Link href="/roles/new">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            新建角色
          </Button>
        </Link>
      </div>
      <PageTable
        basePath="/roles"
        load={RoleService.getRoles}
        columns={columns}
        searchParams={props.searchParams}
      />
    </div>
  );
}

================
File: src/app/admin/webhooks/_components/form.tsx
================
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import { CozeWebhook } from "@prisma/client";
import { createWebhook, updateWebhook } from "../actions";
import { useToast } from "@/hooks/use-toast";

const webhookFormSchema = z.object({
  name: z.string().min(1, "名称不能为空"),
  url: z.string().url("请输入有效的URL地址"),
  authorization: z.string().min(1, "授权密钥不能为空"),
});

type WebhookFormValues = z.infer<typeof webhookFormSchema>;

interface WebhookFormProps {
  initialData?: CozeWebhook;
}

export function WebhookForm({ initialData }: WebhookFormProps) {
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<WebhookFormValues>({
    resolver: zodResolver(webhookFormSchema),
    defaultValues: initialData || {
      name: "",
      url: "",
      authorization: "",
    },
  });

  async function onSubmit(data: WebhookFormValues) {
    try {
      if (initialData) {
        await updateWebhook(initialData.id, data);
      } else {
        await createWebhook(data);
      }
      router.replace("/admin/webhooks");
      router.refresh();
      toast({
        title: "操作成功",
        description: "Webhook已创建",
      });
    } catch (error) {
      toast({
        title: "操作失败",
        description: error instanceof Error ? error.message : "操作失败",
        variant: "destructive",
      });
      console.error("提交失败:", error);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>名称</FormLabel>
              <FormControl>
                <Input placeholder="请输入Webhook名称" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="url"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Webhook地址</FormLabel>
              <FormControl>
                <Input placeholder="请输入Webhook地址" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="authorization"
          render={({ field }) => (
            <FormItem>
              <FormLabel>授权密钥</FormLabel>
              <FormControl>
                <Input placeholder="请输入授权密钥" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">{initialData ? "更新" : "创建"}</Button>
      </form>
    </Form>
  );
}

================
File: src/app/admin/webhooks/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { WebhookForm } from "../_components/form";
import { getWebhook } from "../actions";

interface EditWebhookPageProps {
  params: Promise<{ id: string }>;
}

export default async function EditWebhookPage({
  params,
}: EditWebhookPageProps) {
  const { id } = await params;
  const webhook = await getWebhook(id);

  if (!webhook) {
    notFound();
  }

  return (
    <div className="container mx-auto py-10">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">编辑Webhook</h1>
      </div>
      <div className="rounded-md border p-4">
        <WebhookForm initialData={webhook} />
      </div>
    </div>
  );
}

================
File: src/app/admin/webhooks/actions.ts
================
"use server";

import { db } from "@/lib/db";
import { revalidatePath } from "next/cache";

// 获取Webhook列表
export async function getWebhooks(
  query: PageableQuery<typeof db.cozeWebhook> = { page: 1, pageSize: 10 }
) {
  const skip = (query.page - 1) * query.pageSize;
  const [total, data] = await Promise.all([
    db.cozeWebhook.count({ where: query.where }),
    db.cozeWebhook.findMany({
      skip,
      take: query.pageSize,
      orderBy: {
        createdAt: "desc",
      },
      where: query.where,
      include: {
        _count: {
          select: {
            apiEndpoints: true,
            logs: true,
          },
        },
      },
    }),
  ]);

  return {
    data,
    total,
    page: query.page,
    pageSize: query.pageSize,
    totalPages: Math.ceil(total / query.pageSize),
  };
}

// 创建Webhook
export async function createWebhook(data: {
  url: string;
  authorization: string;
}) {
  const webhook = await db.cozeWebhook.create({
    data,
  });
  revalidatePath("/webhooks");
  return webhook;
}

// 更新Webhook
export async function updateWebhook(
  id: string,
  data: {
    url: string;
    authorization: string;
  }
) {
  const webhook = await db.cozeWebhook.update({
    where: { id },
    data,
  });
  revalidatePath("/webhooks");
  return webhook;
}

// 删除Webhook
export async function deleteWebhook(id: string) {
  await db.cozeWebhook.delete({
    where: { id },
  });
  revalidatePath("/webhooks");
}

// 获取单个Webhook
export async function getWebhook(id: string) {
  return db.cozeWebhook.findUnique({
    where: { id },
  });
}

================
File: src/app/admin/webhooks/columns.tsx
================
"use client";

import { ColumnDef } from "@tanstack/react-table";
import { CozeWebhook } from "@prisma/client";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit } from "lucide-react";
import { deleteWebhook } from "./actions";
import Link from "next/link";
import { RemoveButton } from "@/components/remove-button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

type WebhookWithCount = CozeWebhook & {
  _count: {
    apiEndpoints: number;
    logs: number;
  };
};

export const columns: ColumnDef<WebhookWithCount>[] = [
  {
    accessorKey: "name",
    header: "名称",
  },
  {
    accessorKey: "url",
    header: "Webhook地址",
    cell: ({ row }) => {
      const url = row.original.url;
      return (
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger className="max-w-[200px] truncate">
              {url}
            </TooltipTrigger>
            <TooltipContent>
              <p className="max-w-[400px] break-all">{url}</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      );
    },
  },
  {
    accessorKey: "authorization",
    header: "授权密钥",
  },
  {
    accessorKey: "_count.apiEndpoints",
    header: "API端点数",
  },
  {
    accessorKey: "_count.logs",
    header: "日志数",
  },
  {
    accessorKey: "createdAt",
    header: "创建时间",
    cell: ({ row }) => {
      return new Date(row.original.createdAt).toLocaleString();
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const webhook = row.original;
      const handleDelete = async () => {
        if (!confirm("确定要删除这个Webhook吗？")) return;
        await deleteWebhook(webhook.id);
        window.location.reload();
      };
      return (
        <div className="flex gap-2">
          <Link href={`/admin/webhooks/${webhook.id}`}>
            <Button className="h-8 py-0" variant={"ghost"}>
              编辑
              <Edit className="h-4 w-4" />
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">打开菜单</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <RemoveButton onDeleteAction={handleDelete} />
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    },
  },
];

================
File: src/app/admin/webhooks/new/page.tsx
================
import Image from "next/image";
import { WebhookForm } from "../_components/form";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function NewWebhookPage() {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">新建Webhook</h1>
      </div>
      <div className="mb-6 rounded-md border p-4">
        <WebhookForm />
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Coze Webhook 设置指南</CardTitle>
        </CardHeader>
        <CardContent>
          <Image
            src="/coze_webhook_guide.png"
            alt="Coze Webhook 设置指南"
            width={600}
            height={400}
            className="mb-4"
          />
          <ol className="list-inside list-decimal space-y-2">
            <li>打开智能体编辑</li>
            <li>创建触发器，选择web回调</li>
            <li>获得回调的地址跟授权码（注意不需要Bearer）</li>
          </ol>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/app/admin/webhooks/page.tsx
================
import { getWebhooks } from "./actions";
import { columns } from "./columns";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import Link from "next/link";
import PageTable from "@/components/page-table";

export default async function WebhooksPage(props: PageProps) {
  return (
    <div className="container mx-auto py-10">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">Webhook管理</h1>
        <Link href="/admin/webhooks/new">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            新建Webhook
          </Button>
        </Link>
      </div>
      <PageTable
        basePath="/admin/webhooks"
        load={(data) =>
          getWebhooks({
            page: data.page,
            pageSize: data.pageSize,
            where: data.keyword
              ? {
                  OR: [
                    { name: { contains: data.keyword } },
                    { url: { contains: data.keyword } },
                    { authorization: { contains: data.keyword } },
                  ],
                }
              : {},
          })
        }
        columns={columns}
        searchParams={props.searchParams}
      />
    </div>
  );
}

================
File: src/app/api/[[...slugs]]/route.ts
================
import { app } from "@/api";

export const GET = app.handle;
export const POST = app.handle;
export const PUT = app.handle;
export const DELETE = app.handle;

================
File: src/app/api/[api_id]/route.ts
================
import { ApiEndpointsService } from "@/service/api-endpoints.service";

export async function POST(
  request: Request,
  { params }: { params: Promise<{ api_id: string }> }
) {
  const { api_id } = await params;
  const json = await request.json();
  const apiKey = request.headers.get("Authorization");
  if (!apiKey) {
    return new Response(JSON.stringify({ error: "Unauthorized" }), {
      status: 401,
      headers: { "Content-Type": "application/json" },
    });
  }
  try {
    const coze = await ApiEndpointsService.getClient(apiKey.slice(7), api_id);
    const { hookId } = await coze.send(json);
    let result: string | undefined;
    let attempts = 0;
    const maxAttempts = 30;
    while (!result && attempts < maxAttempts) {
      const query = await coze.coze.query(hookId);
      result = query?.status === "success" ? query?.data : "";
      if (!result) {
        await new Promise((resolve) => setTimeout(resolve, 300));
      }
      attempts++;
    }
    if (!result) {
      throw new Error("Max query attempts reached");
    }

    const cozeResponse = JSON.parse(result);

    return Response.json(cozeResponse);
  } catch (error) {
    const message =
      error instanceof Error ? error.message : "Internal Server Error";
    return new Response(JSON.stringify({ error: message }), {
      status: 401,
      headers: { "Content-Type": "application/json" },
    });
  }
}

export function GET() {
  return new Response("Hello!");
}

================
File: src/app/api/admin/api-endpoints/[id]/keys/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getEndpointKeys } from "@/app/admin/api-endpoints/actions";

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const { searchParams } = new URL(request.url);
  const page = parseInt(searchParams.get("page") || "1");
  const pageSize = parseInt(searchParams.get("pageSize") || "10");

  try {
    const result = await getEndpointKeys(params.id, {
      page,
      pageSize,
    });

    return NextResponse.json(result);
  } catch (error) {
    return NextResponse.json(
      { error: "获取密钥列表失败" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/auth/[...nextauth]/route.ts
================
import { handlers } from "@/lib/auth" // Referring to the auth.ts we just created
export const { GET, POST } = handlers

================
File: src/app/api/v1/chat/completion/route.ts
================
import { ApiEndpointsService } from "@/service/api-endpoints.service";
import { chatCompletionSchema } from "./schema";
import { v4 as uuidv4 } from "uuid";

export async function POST(request: Request) {
  const json = await request.json();
  const apiKey = request.headers.get("Authorization");
  if (!apiKey) {
    return new Response(JSON.stringify({ error: "Unauthorized" }), {
      status: 401,
      headers: { "Content-Type": "application/json" },
    });
  }
  try {
    const parsed = chatCompletionSchema.safeParse(json);
    if (!parsed.success) {
      return new Response(JSON.stringify({ error: parsed.error }), {
        status: 400,
        headers: { "Content-Type": "application/json" },
      });
    }

    const chat = parsed.data;
    const coze = await ApiEndpointsService.getClient(
      apiKey.slice(7),
      chat.model
    );
    const system_prompt =
      chat.messages?.find((item) => item.role === "system")?.content ??
      "You are a helpful assistant.";
    const { hookId } = await coze.send({
      prompt: chat.messages
        .filter((item) => item.role !== "system")
        .map((item) => {
          return `${item.role}: ${item.content}`;
        })
        .join("\n--\n"),
      system_prompt,
    });
    let result: string | undefined;
    let attempts = 0;
    const maxAttempts = 30;
    while (!result && attempts < maxAttempts) {
      const query = await coze.coze.query(hookId);
      result = query?.status === "success" ? query?.data : "";
      if (!result) {
        await new Promise((resolve) => setTimeout(resolve, 300));
      }
      attempts++;
    }
    if (!result) {
      throw new Error("Max query attempts reached");
    }

    const cozeResponse = JSON.parse(result) as { content: string };

    return Response.json({
      id: uuidv4(),
      object: "chat.completion",
      created: Date.now(),
      model: chat.model,
      systemfingerprint: "fp_3a5770e1b4",
      choices: [
        {
          index: 0,
          message: {
            role: "assistant",
            content: cozeResponse.content,
          },
          logprobs: null,
          finishreason: "stop",
        },
      ],
      usage: {
        prompttokens: 11,
        completiontokens: 11,
        totaltokens: 22,
        promptcachehittokens: 0,
        promptcachemisstokens: 11,
      },
    });
  } catch (error) {
    const message =
      error instanceof Error ? error.message : "Internal Server Error";
    return new Response(JSON.stringify({ error: message }), {
      status: 401,
      headers: { "Content-Type": "application/json" },
    });
  }
}

export function GET() {
  return new Response("Hello!");
}

================
File: src/app/api/v1/chat/completion/schema.ts
================
import { z } from "zod";

export const chatCompletionSchema = z.object({
  model: z.string(),
  messages: z.array(
    z.object({
      role: z.enum(["system", "user", "assistant"]),
      content: z.string(),
    })
  ),
});

export type ChatCompletion = z.infer<typeof chatCompletionSchema>;

================
File: src/app/global.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark,
  [data-theme="dark"] {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 20 14.3% 4.1%;
    --card: 0 0% 100%;
    --card-foreground: 20 14.3% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 20 14.3% 4.1%;
    --primary: 24.6 95% 53.1%;
    --primary-foreground: 60 9.1% 97.8%;
    --secondary: 60 4.8% 95.9%;
    --secondary-foreground: 24 9.8% 10%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --accent: 60 4.8% 95.9%;
    --accent-foreground: 24 9.8% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --ring: 24.6 95% 53.1%;
    --radius: 0.75rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 20 14.3% 4.1%;
    --foreground: 60 9.1% 97.8%;
    --card: 20 14.3% 4.1%;
    --card-foreground: 60 9.1% 97.8%;
    --popover: 20 14.3% 4.1%;
    --popover-foreground: 60 9.1% 97.8%;
    --primary: 20.5 90.2% 48.2%;
    --primary-foreground: 60 9.1% 97.8%;
    --secondary: 12 6.5% 15.1%;
    --secondary-foreground: 60 9.1% 97.8%;
    --muted: 12 6.5% 15.1%;
    --muted-foreground: 24 5.4% 63.9%;
    --accent: 12 6.5% 15.1%;
    --accent-foreground: 60 9.1% 97.8%;
    --destructive: 0 72.2% 50.6%;
    --destructive-foreground: 60 9.1% 97.8%;
    --border: 12 6.5% 15.1%;
    --input: 12 6.5% 15.1%;
    --ring: 20.5 90.2% 48.2%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import "./global.css";
import { NuqsAdapter } from "nuqs/adapters/next/app";

import { Toaster } from "@/components/ui/toaster";
import { ThemeProvider } from "@/components/theme-provider";

declare global {
  type SearchParams = Promise<{ [key: string]: string }>;
  type PageProps = {
    searchParams: SearchParams;
  };
}

export const metadata: Metadata = {
  title: "扣子服务管理系统",
  description: "一键管理扣子webhook服务",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html suppressHydrationWarning lang="en">
      <body>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <NuqsAdapter>{children}</NuqsAdapter>

          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  );
}

================
File: src/app/login/page.tsx
================
import { GalleryVerticalEnd } from "lucide-react";

import { LoginForm } from "@/components/auth/login-form";

export default function LoginPage() {
  return (
    <div className="grid min-h-svh lg:grid-cols-2">
      <div className="flex flex-col gap-4 p-6 md:p-10">
        <div className="flex justify-center gap-2 md:justify-start">
          <a href="#" className="flex items-center gap-2 font-medium">
            <div className="flex h-6 w-6 items-center justify-center rounded-md bg-primary text-primary-foreground">
              <GalleryVerticalEnd className="size-4" />
            </div>
            扣子Hook服务
          </a>
        </div>
        <div className="flex flex-1 items-center justify-center">
          <div className="w-[500px] max-w-full">
            <LoginForm />
          </div>
        </div>
      </div>
      <div className="relative hidden bg-muted lg:block">
        <img
          src="/placeholder.svg"
          alt="Image"
          className="absolute inset-0 h-full w-full object-cover dark:brightness-[0.2] dark:grayscale"
        />
      </div>
    </div>
  );
}

================
File: src/app/not-found.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default function NotFound() {
  return (
    <div className="flex h-[100vh] flex-col items-center justify-center">
      <div className="text-center">
        <h1 className="bg-gradient-to-r from-primary to-secondary-foreground bg-clip-text text-8xl font-extrabold text-transparent">
          404
        </h1>
        <h2 className="mt-4 text-2xl font-semibold text-foreground">
          页面未找到
        </h2>
        <p className="mt-2 text-muted-foreground">
          抱歉，您访问的页面不存在或已被移除。
        </p>
        <div className="mt-8">
          <Button asChild>
            <Link
              href="/admin/dashboard"
              className="inline-flex items-center gap-2"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="lucide lucide-home"
              >
                <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />

                <polyline points="9 22 9 12 15 12 15 22" />
              </svg>
              返回首页
            </Link>
          </Button>
        </div>
      </div>
      <div className="mt-16 text-center text-sm text-muted-foreground">
        <p>如果您认为这是一个错误，请联系管理员。</p>
      </div>
    </div>
  );
}

================
File: src/app/page.tsx
================
import { LandingNav } from "@/components/landing/nav";
import { Hero } from "@/components/landing/hero";
import { Features } from "@/components/landing/features";

export default function Page() {
  return (
    <div className="flex min-h-screen flex-col">
      <LandingNav />
      <main className="flex-1">
        <Hero />
        <Features />
      </main>
      <footer className="border-t py-6 md:py-0">
        <div className="container mx-auto flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
          <div className="flex flex-col items-center gap-4 px-8 md:flex-row md:gap-2 md:px-0">
            <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
              Built by{" "}
              <a
                href="#"
                target="_blank"
                rel="noreferrer"
                className="font-medium underline underline-offset-4"
              >
                Your Company
              </a>
              . The source code is available on{" "}
              <a
                href="#"
                target="_blank"
                rel="noreferrer"
                className="font-medium underline underline-offset-4"
              >
                GitHub
              </a>
              .
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

================
File: src/app/webhook/[id]/route.ts
================
import { NextRequest } from "next/server";
import { CozeWebhookService } from "@/service/coze-webhook";

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params;
  const json = await request.json();
  const coze = await CozeWebhookService.getClient(id);
  if ("action" in json) {
    const action = json.action as string;
    if (action === "query") {
      const hookId = json.hookId;
      const result = await coze.query(hookId);
      return Response.json(result);
    }
    if (action === "callback" && "hookId" in json && "body" in json) {
      const hookId = json.hookId;
      const data = json.body;
      const result = await coze.complte(
        hookId,
        typeof data === "string" ? data : JSON.stringify(data)
      );
      return Response.json(result);
    }
  }
  return Response.json({ error: "invalid action" });
}

================
File: src/app/webhook/lib.ts
================
import { MemoryCache } from "@/lib/cache";
import { v4 as uuidv4 } from "uuid";

const WebhookCache = new MemoryCache<{
  start: number;
  end?: number;
  data?: string;
  status: "success" | "wait";
}>();

class CozeWebhookError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "CozeWebhookError";
  }
}

export class CozeWebhook {
  url: string;
  authorization: string;
  id: string;
  callback: string;
  constructor({
    url,
    id,
    authorization,
    callback,
  }: {
    url: string;
    id: string;
    authorization: string;
    callback?: string;
  }) {
    this.id = id;
    this.url = url;
    this.authorization = authorization;
    this.callback =
      callback ?? `${process.env.NEXT_PUBLIC_API_URL}/webhook/${id}`;
  }

  //   转发给coze
  async send(data: Record<string, string>) {
    // 调用成功就创建缓存
    const hookId = uuidv4();
    const response = await fetch(this.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: this.authorization,
      },
      body: JSON.stringify({
        ...data,
        hookId,
        callback: this.callback,
      }),
    });
    const result = (await response.json()) as {
      code: number;
      message: string;
    };
    if (result.code != 0) {
      throw new CozeWebhookError(result.message);
    }

    await WebhookCache.set(hookId, {
      start: Date.now(),
      status: "success",
    });
    return {
      hookId,
      data: result,
    };
  }

  async query(hookId: string) {
    const hook = WebhookCache.get(hookId);
    if (!hook) {
      throw new CozeWebhookError("hook not found");
    }
    return hook;
  }

  async complte(hookId: string, data: string) {
    const hook = await WebhookCache.get(hookId);
    if (!hook) {
      throw new CozeWebhookError("hook not found");
    }
    await WebhookCache.update(
      hookId,
      {
        data,
        status: "success",
        end: Date.now(),
      },
      60 * 1000
    );
    return {
      hookId,
      data,
    };
  }
}

================
File: src/components/app-actions.tsx
================
import {
  Users,
  User,
  Plus,
  Key,
  Menu,
  LayoutDashboard,
  Webhook,
  Aperture,
  History,
  UserCog,
  Shield,
  FileCode,
} from "lucide-react";

export const APP_MENUS: Array<{
  id: string;
  title: string;
  items: {
    title: string;
    icon: React.JSXElementConstructor<React.SVGProps<SVGSVGElement>>;
    url: string;
    target?: string;
  }[];
}> = [
  {
    id: "biz",
    title: "接口服务",
    items: [
      {
        title: "工作台",
        icon: LayoutDashboard,
        url: "/admin/dashboard",
      },
      {
        title: "扣子Hook",
        icon: Webhook,
        url: "/admin/webhooks",
      },
      {
        title: "API服务管理",
        icon: Aperture,
        url: "/admin/api-endpoints",
      },
      {
        title: "API密钥管理",
        icon: Key,
        url: "/admin/api-keys",
      },
      {
        title: "调用日志",
        icon: History,
        url: "/admin/api-logs",
      },
    ],
  },
  {
    id: "sys",
    title: "系统设置",
    items: [
      {
        title: "管理员",
        icon: UserCog,
        url: "/admin/admins",
      },
      {
        title: "角色管理",
        icon: Users,
        url: "/admin/roles",
      },
      {
        title: "权限管理",
        icon: Shield,
        url: "/admin/permissions",
      },
      {
        title: "菜单管理",
        icon: Menu,
        url: "/admin/menus",
      },
    ],
  },
  {
    id: "dev",
    title: "开发",
    items: [
      {
        title: "接口文档",
        icon: FileCode,
        target: "_blank",
        url: "/api/swagger",
      },
    ],
  },
];

export const QuickActions = [
  {
    title: "创建数字人",
    icon: Plus,
    url: "/digital-humans/create",
  },
  {
    title: "个人中心",
    icon: User,
    url: "/admin/profile",
  },
];

================
File: src/components/app-sidebar.tsx
================
import { Command, LogOut } from "lucide-react";
import { BadgeCheck, Bell } from "lucide-react";

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar";
import { UserBar } from "./user-bar";
import { auth, signOut } from "@/lib/auth";
import { ThemeToggle } from "./theme-toggle";
import Link from "next/link";
import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar";
import { redirect } from "next/navigation";
import { QuickLink } from "./quick-link";
import { APP_MENUS } from "./app-actions";
import Image from "next/image";

export async function AppSidebar() {
  const session = await auth();
  if (!session?.user) {
    return;
  }
  return (
    <Sidebar collapsible="icon">
      <SidebarHeader>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton size="lg" asChild>
              <Link href="/dashboard">
                <div className="flex aspect-square size-8 items-center justify-center overflow-hidden rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">
                  <Image
                    src="/coze.png"
                    alt="COZE"
                    width={124}
                    height={124}
                    className="size-full"
                  />
                </div>
                <div className=" grid flex-1 text-left text-sm leading-tight group-[&[data-state=collapsed]]:hidden ">
                  <span className="truncate font-semibold">COZE服务</span>
                  <span className="truncate text-xs">后台管理系统</span>
                </div>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarHeader>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel className="flex gap-2">
            <div className="flex-1">
              <QuickLink />
            </div>
            <div>
              <ThemeToggle />
            </div>
          </SidebarGroupLabel>
        </SidebarGroup>
        <SidebarGroup className="flex-1">
          {APP_MENUS.map((menu) => (
            <SidebarGroupContent title={menu.title} key={menu.id}>
              <SidebarGroupLabel>{menu.title}</SidebarGroupLabel>
              <SidebarMenu>
                {menu.items.map((item) => (
                  <SidebarMenuItem key={item.title}>
                    <SidebarMenuButton asChild>
                      <a
                        href={item.url}
                        target={item.target}
                        rel={
                          item.target === "_blank"
                            ? "noopener noreferrer"
                            : undefined
                        }
                      >
                        <item.icon className="mr-3 h-5 w-5" />

                        <span>{item.title}</span>
                      </a>
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                ))}
              </SidebarMenu>
            </SidebarGroupContent>
          ))}
        </SidebarGroup>
        <SidebarFooter>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <div>
                <div className="p-2 group-data-[state=collapsed]:hidden">
                  <UserBar
                    username={session.user.username!}
                    email={session.user.email!}
                  />
                </div>
                <div className="hidden group-data-[state=collapsed]:block">
                  <Avatar className="h-8 w-8 cursor-pointer rounded-sm border hover:shadow">
                    <AvatarImage
                      src={session.user.image!}
                      alt={session.user.username!}
                    />
                    <AvatarFallback className="rounded-sm">
                      {session.user.username!.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                </div>
              </div>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuLabel>
                <UserBar
                  username={session.user.username!}
                  email={session.user.email!}
                />
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={async () => {
                  "use server";
                  redirect("/admin/profile");
                }}
              >
                <BadgeCheck />
                账户信息
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={async () => {
                  "use server";
                  redirect("/subscribe");
                }}
              >
                <Bell />
                订阅
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={async () => {
                  "use server";
                  await signOut();
                }}
                className="text-red-600 hover:text-red-800"
              >
                <LogOut />
                退出
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </SidebarFooter>
      </SidebarContent>
    </Sidebar>
  );
}

================
File: src/components/auth/login-form.tsx
================
"use client";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { loginSchema } from "@/lib/validations/auth";
import { zodResolver } from "@hookform/resolvers/zod";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { useForm } from "react-hook-form";

export function LoginForm({
  className,
  ...props
}: React.ComponentPropsWithoutRef<"div">) {
  const router = useRouter();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  async function onSubmit(data: Record<string, string>) {
    setIsLoading(true);
    const result = await signIn("credentials", {
      ...data,
      redirect: false,
    });
    setIsLoading(false);
    if (result?.error) {
      toast({
        title: "登录失败",
        description: "邮箱或密码错误",
        variant: "destructive",
      });
      return;
    }
    router.push("/admin/dashboard");
  }

  return (
    <div className={cn("flex flex-col gap-6", className)} {...props}>
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="text-2xl">管理员登陆</CardTitle>
          <CardDescription>
            输入您的邮箱以登录您的账户(默认账号: admin@admin.com/admin)
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <div className="flex flex-col gap-6">
              <div>
                <div className="grid gap-2">
                  <Label htmlFor="email">管理员账号/邮箱</Label>
                  <Input
                    id="email"
                    placeholder="admin@admin.com"
                    required
                    {...form.register("email")}
                    disabled={isLoading}
                  />
                </div>
                {form.formState.errors.email?.message && (
                  <div className="text-sm text-red-500">
                    {form.formState.errors.email?.message}
                  </div>
                )}
              </div>
              <div>
                <div className="grid gap-2">
                  <div className="flex items-center">
                    <Label htmlFor="password">密码</Label>
                    <a
                      href="#"
                      className="ml-auto inline-block text-sm underline-offset-4 hover:underline"
                    >
                      忘记密码？
                    </a>
                  </div>
                  <Input
                    id="password"
                    type="password"
                    required
                    {...form.register("password")}
                    disabled={isLoading}
                  />
                </div>
                {form.formState.errors.password?.message && (
                  <div className="text-sm text-red-500">
                    {form.formState.errors.password?.message}
                  </div>
                )}
              </div>
              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? "登录中..." : "登录"}
              </Button>
            </div>
            <div className="mt-4 text-center text-sm">
              还没有账户？{" "}
              <a href="#" className="underline underline-offset-4">
                注册
              </a>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src/components/devices/header.tsx
================
import { CreateDevice } from "../../app/admin/devices/create-button";

export function DeviceHeader() {
  return (
    <div className="flex items-center justify-between">
      <div>
        <h1 className="text-3xl font-bold">设备管理</h1>
        <p className="mt-2 text-sm text-muted-foreground">
          管理已激活的设备和分配数字人
        </p>
      </div>
      <CreateDevice />
    </div>
  );
}

================
File: src/components/devices/list.tsx
================
import { DeviceService } from "@/service/device.service";
import { DeviceCard } from "../../app/admin/devices/card";

export async function DeviceList() {
  const { data: devices } = await DeviceService.getDevices();

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {devices.map((device) => (
        <DeviceCard key={device.id} device={device} />
      ))}
    </div>
  );
}

================
File: src/components/landing/features.tsx
================
export function Features() {
  return (
    <section
      id="features"
      className="container mx-auto space-y-6 bg-slate-50 py-8 dark:bg-transparent md:py-12 lg:py-24"
    >
      <div className="mx-auto flex max-w-[58rem] flex-col items-center space-y-4 text-center">
        <h2 className="text-3xl font-bold leading-[1.1] sm:text-3xl md:text-6xl">
          功能特点
        </h2>
        <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7">
          我们提供全面的数字人管理功能，满足您的各种需求
        </p>
      </div>
      <div className="mx-auto grid justify-center gap-4 sm:grid-cols-2 md:max-w-[64rem] md:grid-cols-3">
        <div className="relative overflow-hidden rounded-lg border bg-background p-2">
          <div className="flex h-[180px] flex-col justify-between rounded-md p-6">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="h-12 w-12"
            >
              <path d="M12 22c6.23-.05 7.87-5.57 7.5-10-.36-4.34-3.95-9.96-7.5-10-3.55.04-7.14 5.66-7.5 10-.37 4.43 1.27 9.95 7.5 10z" />
            </svg>
            <div className="space-y-2">
              <h3 className="font-bold">智能对话</h3>
              <p className="text-sm text-muted-foreground">
                基于先进的AI技术，提供自然流畅的对话体验
              </p>
            </div>
          </div>
        </div>
        <div className="relative overflow-hidden rounded-lg border bg-background p-2">
          <div className="flex h-[180px] flex-col justify-between rounded-md p-6">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="h-12 w-12"
            >
              <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />

              <polyline points="14 2 14 8 20 8" />
            </svg>
            <div className="space-y-2">
              <h3 className="font-bold">知识库管理</h3>
              <p className="text-sm text-muted-foreground">
                轻松管理数字人的知识库，支持批量导入和更新
              </p>
            </div>
          </div>
        </div>
        <div className="relative overflow-hidden rounded-lg border bg-background p-2">
          <div className="flex h-[180px] flex-col justify-between rounded-md p-6">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="h-12 w-12"
            >
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />

              <polyline points="7 10 12 15 17 10" />
              <line x1="12" y1="15" x2="12" y2="3" />
            </svg>
            <div className="space-y-2">
              <h3 className="font-bold">一键部署</h3>
              <p className="text-sm text-muted-foreground">
                支持多平台一键部署，快速上线数字人服务
              </p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

================
File: src/components/landing/hero.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";

export function Hero() {
  return (
    <div className="container relative mx-auto min-h-[calc(100vh-4rem)] flex-col items-center justify-center md:grid lg:max-w-none lg:grid-cols-2 lg:px-0">
      <div className="relative hidden h-full flex-col bg-muted p-10 text-white dark:border-r lg:flex">
        <div className="absolute inset-0 bg-zinc-900" />
        <div className="relative z-20 flex items-center text-lg font-medium">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="mr-2 h-6 w-6"
          >
            <path d="M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" />
          </svg>
          数字人管理系统
        </div>
        <div className="relative z-20 mt-auto">
          <blockquote className="space-y-2">
            <p className="text-lg">
              "这个平台让我们能够轻松管理和部署数字人，大大提高了我们的工作效率。"
            </p>
            <footer className="text-sm">某科技公司 CEO</footer>
          </blockquote>
        </div>
      </div>
      <div className="flex h-full items-center lg:p-8">
        <div className="mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]">
          <div className="flex flex-col space-y-2 text-center">
            <h1 className="text-3xl font-bold tracking-tight">
              智能数字人管理平台
            </h1>
            <p className="text-sm text-muted-foreground">
              一站式数字人管理解决方案，让您的数字人管理更简单、更高效
            </p>
          </div>
          <div className="flex justify-center gap-4">
            <Button asChild size="lg">
              <Link href="/register">免费试用</Link>
            </Button>
            <Button variant="outline" size="lg" asChild>
              <Link href="#features">了解更多</Link>
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/landing/nav.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { auth } from "@/lib/auth";

export async function LandingNav() {
  const session = await auth();

  return (
    <nav className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container mx-auto flex h-16 items-center justify-between">
        <div className="flex items-center gap-8">
          <Link href="/" className="flex items-center space-x-2">
            <span className="bg-gradient-to-r from-primary to-secondary-foreground bg-clip-text text-xl font-bold text-transparent">
              数字人管理系统
            </span>
          </Link>
          <div className="hidden gap-6 md:flex">
            <Link
              href="#features"
              className="text-sm font-medium text-muted-foreground transition-colors hover:text-primary"
            >
              功能特点
            </Link>
            <Link
              href="#pricing"
              className="text-sm font-medium text-muted-foreground transition-colors hover:text-primary"
            >
              价格方案
            </Link>
            <Link
              href="#about"
              className="text-sm font-medium text-muted-foreground transition-colors hover:text-primary"
            >
              关于我们
            </Link>
          </div>
        </div>
        <div className="flex items-center gap-4">
          {session?.user ? (
            <Button asChild>
              <Link href="/admin/dashboard">进入控制台</Link>
            </Button>
          ) : (
            <>
              <Button variant="ghost" asChild>
                <Link href="/login">登录</Link>
              </Button>
              <Button asChild>
                <Link href="/register">立即注册</Link>
              </Button>
            </>
          )}
        </div>
      </div>
    </nav>
  );
}

================
File: src/components/page-list.tsx
================
import { Plus } from "lucide-react";
import { SmartPagination } from "@/components/shared/smart-pagination";
import {
  parseAsInteger,
  createLoader,
  inferParserType,
  parseAsString,
} from "nuqs/server";
import { redirect } from "next/navigation";
import { SearchForm } from "./search-form";
import { Input } from "./ui/input";

export const pageSearchParams = {
  page: parseAsInteger.withDefault(1),
  pageSize: parseAsInteger.withDefault(10),
  keyword: parseAsString.withOptions({}),
};

export type PageListProps<
  T extends {
    page: typeof pageSearchParams.page;
    pageSize: typeof pageSearchParams.pageSize;
    keyword: typeof pageSearchParams.keyword;
  },
  D,
> = PageProps & {
  /** 显示快速检索 */
  showQuickSearch?: boolean;

  /** 自定义查询参数解析器 */
  queryParse?: T;
  /** 基础路径，用于构建分页 URL */
  basePath: string;
  /**
   * 加载数据的函数
   * @param params 查询参数
   * @returns 包含数据和总数的 Promise
   */
  load(params: inferParserType<T>): Promise<{
    data: D[];
    total: number;
  }>;
  onDelete?: (id: string) => Promise<{ error?: string; success?: boolean }>;
  renderItem: (item: D, index: number) => React.ReactNode;

  emptyMessage?: string;
  empty?: React.ReactNode;
};

export default async function PageList<
  D,
  T extends {
    page: typeof pageSearchParams.page;
    pageSize: typeof pageSearchParams.pageSize;
    keyword: typeof pageSearchParams.keyword;
  },
>({
  empty,
  emptyMessage,
  showQuickSearch,
  searchParams,
  queryParse = pageSearchParams as T,
  basePath,
  load,
  renderItem,
}: PageListProps<T, D>) {
  const loadSearchParams = createLoader(queryParse);
  const params = await loadSearchParams(searchParams);
  const { data, total } = await load(params);

  const onPagination = async (
    page: number,
    pageSize: number
  ): Promise<never> => {
    "use server";
    const searchParams = new URLSearchParams();
    searchParams.set("page", page.toString());
    searchParams.set("pageSize", pageSize.toString());
    const separator = basePath.includes("?") ? "&" : "?";
    redirect(`${basePath}${separator}${searchParams.toString()}`);
  };
  return (
    <div className="container mx-auto py-10">
      {showQuickSearch && (
        <SearchForm
          basePath={basePath}
          searchParams={searchParams}
          queryParse={queryParse}
        >
          {(search) => {
            return (
              <Input
                className="max-w-xs"
                defaultValue={search.keyword ?? ""}
                placeholder="快速检索"
                name="keyword"
              />
            );
          }}
        </SearchForm>
      )}
      {data.length < 1 &&
        (empty ?? (
          <div className="flex min-h-[400px] flex-col items-center justify-center rounded-md border border-dashed p-8 text-center animate-in fade-in-50">
            <div className="mx-auto flex max-w-[420px] flex-col items-center justify-center text-center">
              <div className="flex h-20 w-20 items-center justify-center rounded-full bg-muted">
                <Plus className="h-10 w-10" />
              </div>
              <h2 className="mt-6 text-xl font-semibold">没有数据</h2>
              <p className="mb-8 mt-2 text-center text-sm font-normal leading-6 text-muted-foreground">
                {emptyMessage}
              </p>
            </div>
          </div>
        ))}
      {total > 0 && (
        <>
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {data.map(renderItem)}
          </div>
          <SmartPagination
            className="mt-5"
            page={params.page}
            pageSize={params.pageSize}
            total={total}
            pageSizeOptions={[10, 20, 30, 50]}
            showSizeChanger
            onChange={onPagination}
          />
        </>
      )}
    </div>
  );
}

================
File: src/components/page-table.tsx
================
import { DataTable } from "@/components/shared/data-table";
import { redirect } from "next/navigation";
import {
  parseAsInteger,
  createLoader,
  inferParserType,
  parseAsString,
} from "nuqs/server";
import { ColumnDef } from "@/components/shared/data-table";
import { SearchForm } from "./search-form";
import { Input } from "./ui/input";

const pageSearchParams = {
  page: parseAsInteger.withDefault(1),
  pageSize: parseAsInteger.withDefault(10),
  keyword: parseAsString.withOptions({}),
};

/**
 * PageTableProps 定义了 PageTable 组件的属性类型
 * @template T 扩展了基本分页参数的查询参数类型
 * @template D 表格数据项的类型
 */
export type PageTableProps<
  T extends {
    page: typeof pageSearchParams.page;
    pageSize: typeof pageSearchParams.pageSize;
    keyword: typeof pageSearchParams.keyword;
  },
  D,
> = PageProps & {
  /** 显示快速检索 */
  showQuickSearch?: boolean;
  /** 自定义查询参数解析器 */
  queryParse?: T;
  /** 基础路径，用于构建分页 URL */
  basePath: string;
  /** 可选的每页显示数量选项 */
  pageSizeOptions?: number[];
  /** 表格列定义 */
  columns: ColumnDef<D>[];
  /**
   * 加载数据的函数
   * @param params 查询参数
   * @returns 包含数据和总数的 Promise
   */
  load(params: inferParserType<T>): Promise<{
    data: D[];
    total: number;
  }>;
};

export default async function PageTable<
  D,
  T extends {
    page: typeof pageSearchParams.page;
    pageSize: typeof pageSearchParams.pageSize;
    keyword: typeof pageSearchParams.keyword;
  },
>({
  searchParams,
  queryParse = pageSearchParams as T,
  load,
  columns,
  showQuickSearch = true,
  basePath,
  pageSizeOptions = [10, 20, 30, 50],
}: PageTableProps<T, D>) {
  const loadSearchParams = createLoader(queryParse);
  const params = await loadSearchParams(searchParams);
  const originSearchParams = await searchParams;
  const { data, total } = await load(params);

  const onPagination = async (
    page: number,
    pageSize: number
  ): Promise<never> => {
    "use server";
    const newParams = new URLSearchParams(originSearchParams);
    newParams.set("page", page.toString());
    newParams.set("pageSize", pageSize.toString());
    const separator = basePath.includes("?") ? "&" : "?";
    redirect(`${basePath}${separator}${newParams.toString()}`);
  };
  return (
    <>
      {showQuickSearch && (
        <SearchForm
          basePath={basePath}
          searchParams={searchParams}
          queryParse={queryParse}
        >
          {(search) => {
            return (
              <Input
                className="max-w-xs"
                defaultValue={search.keyword ?? ""}
                placeholder="快速检索"
                name="keyword"
              />
            );
          }}
        </SearchForm>
      )}
      <DataTable
        rowCount={total}
        pageNumber={params.page}
        pageSizeOptions={pageSizeOptions}
        pageSize={params.pageSize}
        onPagination={onPagination}
        columns={columns}
        data={data}
      />
    </>
  );
}

================
File: src/components/quick-link.tsx
================
"use client";

import * as React from "react";
import { Search } from "lucide-react";
import { search } from "text-search-engine";
import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import { APP_MENUS, QuickActions } from "./app-actions";
import { useRouter } from "next/navigation";

export function QuickLink() {
  const router = useRouter();
  const [open, setOpen] = React.useState(false);

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "j" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setOpen((open) => !open);
      }
    };

    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, []);

  return (
    <>
      <div
        className="flex cursor-pointer items-center space-x-2 rounded-md border px-3 py-1 hover:bg-muted/50"
        onClick={() => setOpen(true)}
      >
        <Search className="h-4 w-4 shrink-0 text-muted-foreground" />
        <span className="flex w-full bg-transparent py-0.5 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50">
          ⌘J 快捷执行...
        </span>
      </div>
      <CommandDialog
        filter={(value, searchKey) => {
          const results = search(value, searchKey);
          if ((results?.length ?? 0) > 0) return 1;
          return 0;
        }}
        open={open}
        onOpenChange={setOpen}
      >
        <CommandInput placeholder="输入功能快速检索" />
        <CommandList>
          <CommandEmpty>无匹配结果.</CommandEmpty>
          {APP_MENUS.map((group) => {
            return (
              <React.Fragment key={group.id}>
                <CommandGroup heading={group.title}>
                  {group.items.map((action) => {
                    return (
                      <CommandItem
                        key={action.url}
                        onSelect={() => {
                          router.push(action.url);
                          setOpen(false);
                        }}
                        className="cursor-pointer"
                      >
                        <action.icon />
                        <span>{action.title}</span>
                      </CommandItem>
                    );
                  })}
                </CommandGroup>
                <CommandSeparator />
              </React.Fragment>
            );
          })}
          {QuickActions.map((action) => {
            return (
              <CommandItem
                onSelect={() => {
                  router.push(action.url);
                  setOpen(false);
                }}
                className="cursor-pointer"
                key={action.url}
              >
                <action.icon />
                <span>{action.title}</span>
              </CommandItem>
            );
          })}
        </CommandList>
      </CommandDialog>
    </>
  );
}

================
File: src/components/remove-button.tsx
================
import {
  AlertDialogHeader,
  AlertDialogFooter,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogCancel,
  AlertDialogAction,
} from "@/components/ui/alert-dialog";
import { Trash2 } from "lucide-react";

export interface RemoveButtonProps {
  /**
   * 删除操作的文本
   */
  deleteText?: string;
  /**
   * 提示文本
   */
  description?: string;
  /**
   * 点击删除按钮时的回调函数
   */
  onDeleteAction: () => void;
}

export function RemoveButton(props: RemoveButtonProps) {
  const {
    deleteText = "删除",
    description = "此操作无法撤销，确定要删除吗？",
    onDeleteAction,
  } = props;
  return (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button className="w-full justify-start  text-red-400" variant="ghost">
          <Trash2 className="mr-2 h-4 w-4" />
          {deleteText}
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>确认删除</AlertDialogTitle>
          <AlertDialogDescription>{description}</AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>取消</AlertDialogCancel>
          <AlertDialogAction onClick={onDeleteAction}>
            {deleteText}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

================
File: src/components/search-form.tsx
================
import { createLoader, inferParserType, parseAsInteger } from "nuqs/server";
import { Button } from "./ui/button";
import { redirect } from "next/navigation";
const onSearch = async (
  basePath: string,
  data: FormData,
  params: { [key: string]: string },
  originSearchParams: {
    [key: string]: string;
  }
): Promise<never> => {
  "use server";
  const newParams = new URLSearchParams(originSearchParams);
  newParams.set("page", "1");
  Object.entries(params).map(([key]) => {
    const newValue = data.get(key)?.toString();
    if (newValue) {
      newParams.set(key, newValue);
    } else {
      newParams.delete(key);
    }
  });
  const separator = basePath.includes("?") ? "&" : "?";
  redirect(`${basePath}${separator}${newParams.toString()}`);
};
const pageSearchParams = {
  page: parseAsInteger.withDefault(1),
  pageSize: parseAsInteger.withDefault(10),
};

async function onReset(
  basePath: string,
  params: { [key: string]: string },
  originSearchParams: {
    [key: string]: string;
  }
) {
  "use server";
  const newParams = new URLSearchParams(originSearchParams);
  newParams.set("page", "1");
  Object.entries(params).map(([key]) => {
    newParams.delete(key);
  });
  // 清理所有的检索任务
  const separator = basePath.includes("?") ? "&" : "?";
  redirect(`${basePath}${separator}${newParams.toString()}`);
}
export async function SearchForm<
  T extends {
    page: typeof pageSearchParams.page;
    pageSize: typeof pageSearchParams.pageSize;
  },
>(props: {
  basePath: string;
  queryParse?: T;
  searchParams: PageProps["searchParams"];
  children?:
    | React.ReactNode
    | ((formValue: inferParserType<T>) => React.ReactNode);
}) {
  const { searchParams, queryParse = pageSearchParams as T, basePath } = props;
  const loadSearchParams = createLoader(queryParse);
  const params = await loadSearchParams(searchParams);
  const originSearchParams = await searchParams;

  return (
    <div className="mb-4">
      <form
        action={async (data) => {
          "use server";
          await onSearch(basePath, data, params, originSearchParams);
        }}
        className="flex space-x-2"
      >
        {typeof props.children === "function"
          ? props.children(params)
          : props.children}
        <Button type="submit">搜索</Button>
        <Button
          formAction={async () => {
            "use server";
            await onReset(basePath, params, originSearchParams);
          }}
          type="submit"
          variant={"outline"}
        >
          重置
        </Button>
      </form>
    </div>
  );
}

================
File: src/components/shared/data-table.tsx
================
"use client";
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

import { SmartPagination } from "./smart-pagination";
import { Skeleton } from "@/components/ui/skeleton";

export type { ColumnDef } from "@tanstack/react-table";
/**
 * DataTable 组件的属性接口
 * @template TData 表格数据类型
 * @template TValue 表格值类型
 */
interface DataTableProps<TData, TValue> {
  /** 表格列定义 */
  columns: ColumnDef<TData, TValue>[];
  /** 表格数据 */
  data: TData[];
  /** 总行数（可选） */
  rowCount?: number;
  /** 当前页码（可选） */
  pageNumber?: number;
  /** 每页显示的行数（可选） */
  pageSize?: number;
  /** 自定义空状态组件（可选） */
  empty?: React.ReactNode;
  /** 空状态消息（可选） */
  emptyMessage?: string;
  /** 分页变化回调函数（可选） */
  onPagination?: (pageIndex: number, pageSize: number) => void;
  /** 可选的每页显示行数选项（可选） */
  pageSizeOptions?: number[];
  /** 加载状态（可选） */
  loading?: boolean;
}

export function DataTable<TData, TValue>({
  columns,
  data,
  rowCount,
  onPagination,
  emptyMessage = "没有数据",
  empty,
  pageNumber: pageNumber = 1,
  pageSize = 10,
  pageSizeOptions = [10, 20, 30, 50],
  loading = false,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    rowCount,
    state: { pagination: { pageIndex: pageNumber - 1, pageSize } },
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {loading
              ? Array.from({ length: 5 }).map((_, index) => (
                  <TableRow key={index}>
                    {columns.map((_, cellIndex) => (
                      <TableCell key={cellIndex}>
                        <Skeleton className="h-6 w-full" />
                      </TableCell>
                    ))}
                  </TableRow>
                ))
              : table.getRowModel().rows?.length
                ? table.getRowModel().rows.map((row) => (
                    <TableRow
                      key={row.id}
                      data-state={row.getIsSelected() && "selected"}
                    >
                      {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext()
                          )}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))
                : (empty ?? (
                    <TableRow>
                      <TableCell
                        colSpan={columns.length}
                        className="h-24 text-center"
                      >
                        {emptyMessage}
                      </TableCell>
                    </TableRow>
                  ))}
          </TableBody>
        </Table>
      </div>
      <SmartPagination
        className="mt-4"
        page={table.getState().pagination.pageIndex + 1}
        pageSize={table.getState().pagination.pageSize}
        total={table.getRowCount()}
        onChange={onPagination}
        pageSizeOptions={pageSizeOptions}
        showSizeChanger
      />
    </>
  );
}

================
File: src/components/shared/smart-pagination.tsx
================
"use client";

import { useMemo } from "react";
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from "@/lib/utils";

/**
 * Props for the SmartPagination component.
 * @interface SmartPaginationProps
 */
interface SmartPaginationProps {
  /** Current page number */
  page: number;
  /** Number of items per page */
  pageSize: number;
  /** Total number of items */
  total: number;
  /** Callback function for previous page action */
  onPrev?: () => void;
  /** Callback function for next page action */
  onNext?: () => void;
  /** Callback function when page changes */
  onChange?: (page: number, pageSize: number) => void;
  /** Callback function when page size changes */
  onChangePageSize?: (pageSize: number) => void;
  /** Available options for page size */
  pageSizeOptions?: number[];
  /** Whether to show the page size changer */
  showSizeChanger?: boolean;
  /** Additional CSS class names */
  className?: string;
  /** Inline styles */
  style?: React.CSSProperties;
  ref?: React.Ref<HTMLDivElement>;
}

/**
 * SmartPagination component for handling pagination with customizable options.
 * @param {SmartPaginationProps} props - The props for the SmartPagination component
 */
export function SmartPagination({
  page,
  pageSize,
  total,
  onPrev,
  onNext,
  className,
  style,
  onChange,
  onChangePageSize,
  pageSizeOptions = [10, 20, 30, 50],
  showSizeChanger = false,
  ref,
}: SmartPaginationProps) {
  const totalPages = Math.ceil(total / pageSize);

  const pageNumbers = useMemo(() => {
    const generatePageNumbers = () => {
      if (totalPages <= 7) {
        return Array.from({ length: totalPages }, (_, i) => i + 1);
      }

      if (page <= 4) {
        return [1, 2, 3, 4, 5, "ellipsis", totalPages];
      }

      if (page >= totalPages - 3) {
        return [
          1,
          "ellipsis",
          totalPages - 4,
          totalPages - 3,
          totalPages - 2,
          totalPages - 1,
          totalPages,
        ];
      }

      return [1, "ellipsis", page - 1, page, page + 1, "ellipsis", totalPages];
    };

    return generatePageNumbers();
  }, [page, totalPages]);

  /**
   * Handles page change
   * @param {number} newPage - The new page number
   */
  const handlePageChange = (newPage: number) => {
    if (newPage === page) return;
    if (newPage < 1 || newPage > totalPages) return;
    onChange?.(newPage, pageSize);
  };

  /**
   * Handles previous page action
   */
  const handlePrev = () => {
    if (page > 1) {
      onChange?.(page - 1, pageSize);
      onPrev?.();
    }
  };

  /**
   * Handles next page action
   */
  const handleNext = () => {
    if (page < totalPages) {
      onChange?.(page + 1, pageSize);
      onNext?.();
    }
  };

  return (
    <div
      ref={ref}
      className={cn(
        "flex items-center gap-2",
        showSizeChanger && "justify-between",
        className
      )}
      style={style}
    >
      <Pagination className="justify-end">
        <PaginationContent>
          <PaginationItem>
            <PaginationPrevious
              onClick={handlePrev}
              className={
                page <= 1 ? "pointer-events-none opacity-50" : "cursor-pointer"
              }
            />
          </PaginationItem>

          {pageNumbers.map((pageNumber, index) => (
            <PaginationItem key={index}>
              {pageNumber === "ellipsis" ? (
                <PaginationEllipsis />
              ) : (
                <PaginationLink
                  onClick={() => handlePageChange(pageNumber as number)}
                  isActive={page === pageNumber}
                  className="cursor-pointer"
                >
                  {pageNumber}
                </PaginationLink>
              )}
            </PaginationItem>
          ))}

          <PaginationItem>
            <PaginationNext
              onClick={handleNext}
              className={
                page >= totalPages
                  ? "pointer-events-none opacity-50"
                  : "cursor-pointer"
              }
            />
          </PaginationItem>
        </PaginationContent>
      </Pagination>

      {showSizeChanger ? (
        <div className="flex items-center gap-2">
          <span className="text-nowrap text-sm text-muted-foreground">
            每页
          </span>
          <Select
            value={pageSize.toString()}
            onValueChange={(value) => {
              onChange?.(page, Number(value));
              onChangePageSize?.(Number(value));
            }}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {pageSizeOptions.map((size) => (
                <SelectItem key={size} value={size.toString()}>
                  {size}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <span className="text-nowrap text-sm text-muted-foreground">
            共{total}条
          </span>
        </div>
      ) : (
        <span className="text-nowrap text-sm text-muted-foreground">
          共{total}条
        </span>
      )}
    </div>
  );
}

================
File: src/components/shared/tree-view.tsx
================
"use client";

import React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronRight } from "lucide-react";
import { cva } from "class-variance-authority";
import { cn } from "@/lib/utils";

const treeVariants = cva(
  "group hover:before:opacity-100 before:absolute before:rounded-lg before:left-0 px-2 before:w-full before:opacity-0 before:bg-accent/70 before:h-[2rem] before:-z-10"
);

const selectedTreeVariants = cva(
  "before:opacity-100 before:bg-accent/70 text-accent-foreground"
);

interface TreeDataItem {
  id: string;
  name: string;
  icon?: React.ReactNode;
  selectedIcon?: React.ReactNode;
  openIcon?: React.ReactNode;
  children?: TreeDataItem[];
  actions?: React.ReactNode;
  onClick?: () => void;
}

type TreeProps = React.HTMLAttributes<HTMLDivElement> & {
  data: TreeDataItem[] | TreeDataItem;
  initialSelectedItemId?: string;
  onSelectChange?: (item: TreeDataItem | undefined) => void;
  expandAll?: boolean;
  defaultNodeIcon?: React.ReactNode;
  defaultLeafIcon?: React.ReactNode;
};

const TreeView = React.forwardRef<HTMLDivElement, TreeProps>(
  (
    {
      data,
      initialSelectedItemId,
      onSelectChange,
      expandAll,
      defaultLeafIcon,
      defaultNodeIcon,
      className,
      ...props
    },
    ref
  ) => {
    const [selectedItemId, setSelectedItemId] = React.useState<
      string | undefined
    >(initialSelectedItemId);

    const handleSelectChange = React.useCallback(
      (item: TreeDataItem | undefined) => {
        setSelectedItemId(item?.id);
        if (onSelectChange) {
          onSelectChange(item);
        }
      },
      [onSelectChange]
    );

    const expandedItemIds = React.useMemo(() => {
      if (!initialSelectedItemId) {
        return [] as string[];
      }

      const ids: string[] = [];

      function walkTreeItems(
        items: TreeDataItem[] | TreeDataItem,
        targetId: string
      ) {
        if (items instanceof Array) {
          for (let i = 0; i < items.length; i++) {
            ids.push(items[i]!.id);
            if (walkTreeItems(items[i]!, targetId) && !expandAll) {
              return true;
            }
            if (!expandAll) ids.pop();
          }
        } else if (!expandAll && items.id === targetId) {
          return true;
        } else if (items.children) {
          return walkTreeItems(items.children, targetId);
        }
      }

      walkTreeItems(data, initialSelectedItemId);
      return ids;
    }, [data, expandAll, initialSelectedItemId]);

    return (
      <div className={cn("relative overflow-hidden p-2", className)}>
        <TreeItem
          data={data}
          ref={ref}
          selectedItemId={selectedItemId}
          handleSelectChange={handleSelectChange}
          expandedItemIds={expandedItemIds}
          defaultLeafIcon={defaultLeafIcon}
          defaultNodeIcon={defaultNodeIcon}
          {...props}
        />
      </div>
    );
  }
);
TreeView.displayName = "TreeView";

type TreeItemProps = TreeProps & {
  selectedItemId?: string;
  handleSelectChange: (item: TreeDataItem | undefined) => void;
  expandedItemIds: string[];
  defaultNodeIcon?: React.ReactNode;
  defaultLeafIcon?: React.ReactNode;
};

const TreeItem = React.forwardRef<HTMLDivElement, TreeItemProps>(
  (
    {
      className,
      data,
      selectedItemId,
      handleSelectChange,
      expandedItemIds,
      defaultNodeIcon,
      defaultLeafIcon,
      ...props
    },
    ref
  ) => {
    if (!(data instanceof Array)) {
      data = [data];
    }
    return (
      <div ref={ref} role="tree" className={className} {...props}>
        <ul>
          {data.map((item) => (
            <li key={item.id}>
              {item.children ? (
                <TreeNode
                  item={item}
                  selectedItemId={selectedItemId}
                  expandedItemIds={expandedItemIds}
                  handleSelectChange={handleSelectChange}
                  defaultNodeIcon={defaultNodeIcon}
                  defaultLeafIcon={defaultLeafIcon}
                />
              ) : (
                <TreeLeaf
                  item={item}
                  selectedItemId={selectedItemId}
                  handleSelectChange={handleSelectChange}
                  defaultLeafIcon={defaultLeafIcon}
                />
              )}
            </li>
          ))}
        </ul>
      </div>
    );
  }
);
TreeItem.displayName = "TreeItem";

const TreeNode = ({
  item,
  handleSelectChange,
  expandedItemIds,
  selectedItemId,
  defaultNodeIcon,
  defaultLeafIcon,
}: {
  item: TreeDataItem;
  handleSelectChange: (item: TreeDataItem | undefined) => void;
  expandedItemIds: string[];
  selectedItemId?: string;
  defaultNodeIcon?: React.ReactNode;
  defaultLeafIcon?: React.ReactNode;
}) => {
  const [value, setValue] = React.useState(
    expandedItemIds.includes(item.id) ? [item.id] : []
  );
  return (
    <AccordionPrimitive.Root
      type="multiple"
      value={value}
      onValueChange={(s) => setValue(s)}
    >
      <AccordionPrimitive.Item value={item.id}>
        <AccordionTrigger
          className={cn(
            treeVariants(),
            selectedItemId === item.id && selectedTreeVariants()
          )}
          onClick={() => {
            handleSelectChange(item);
            item.onClick?.();
          }}
        >
          <TreeIcon
            item={item}
            isSelected={selectedItemId === item.id}
            isOpen={value.includes(item.id)}
            default={defaultNodeIcon}
          />
          <span className="truncate text-sm">{item.name}</span>
          <TreeActions isSelected={selectedItemId === item.id}>
            {item.actions}
          </TreeActions>
        </AccordionTrigger>
        <AccordionContent className="ml-4 border-l pl-1">
          <TreeItem
            data={item.children ? item.children : item}
            selectedItemId={selectedItemId}
            handleSelectChange={handleSelectChange}
            expandedItemIds={expandedItemIds}
            defaultLeafIcon={defaultLeafIcon}
            defaultNodeIcon={defaultNodeIcon}
          />
        </AccordionContent>
      </AccordionPrimitive.Item>
    </AccordionPrimitive.Root>
  );
};

const TreeLeaf = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & {
    item: TreeDataItem;
    selectedItemId?: string;
    handleSelectChange: (item: TreeDataItem | undefined) => void;
    defaultLeafIcon?: React.ReactNode;
  }
>(
  (
    {
      className,
      item,
      selectedItemId,
      handleSelectChange,
      defaultLeafIcon,
      ...props
    },
    ref
  ) => {
    return (
      <div
        ref={ref}
        className={cn(
          "ml-5 flex cursor-pointer items-center py-2 text-left before:right-1",
          treeVariants(),
          className,
          selectedItemId === item.id && selectedTreeVariants()
        )}
        onClick={() => {
          handleSelectChange(item);
          item.onClick?.();
        }}
        {...props}
      >
        <TreeIcon
          item={item}
          isSelected={selectedItemId === item.id}
          default={defaultLeafIcon}
        />
        <span className="flex-grow truncate text-sm">{item.name}</span>
        <TreeActions isSelected={selectedItemId === item.id}>
          {item.actions}
        </TreeActions>
      </div>
    );
  }
);
TreeLeaf.displayName = "TreeLeaf";

const AccordionTrigger = React.forwardRef<
  React.ComponentRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header>
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex w-full flex-1 items-center py-2 transition-all first:[&[data-state=open]>svg]:rotate-90",
        className
      )}
      {...props}
    >
      <ChevronRight className="mr-1 h-4 w-4 shrink-0 text-accent-foreground/50 transition-transform duration-200" />
      {children}
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ComponentRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      "data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm transition-all",
      className
    )}
    {...props}
  >
    <div className="pb-1 pt-0">{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

const TreeIcon = ({
  item,
  isOpen,
  isSelected,
  default: defaultIcon,
}: {
  item: TreeDataItem;
  isOpen?: boolean;
  isSelected?: boolean;
  default?: React.ReactNode;
}) => {
  let Icon = defaultIcon;
  if (isSelected && item.selectedIcon) {
    Icon = item.selectedIcon;
  } else if (isOpen && item.openIcon) {
    Icon = item.openIcon;
  } else if (item.icon) {
    Icon = item.icon;
  }
  return Icon ? <>{Icon}</> : null;
};

const TreeActions = ({
  children,
  isSelected,
}: {
  children: React.ReactNode;
  isSelected: boolean;
}) => {
  return (
    <div
      className={cn(
        isSelected ? "block" : "hidden",
        "absolute right-3 group-hover:block"
      )}
    >
      {children}
    </div>
  );
};

export { TreeView, type TreeDataItem };

================
File: src/components/skeleton/form.tsx
================
import { Skeleton } from "@/components/ui/skeleton";

export function SkeletonForm() {
  return (
    <div className="container mx-auto p-8 animate-in fade-in-50">
      {/* 页面标题骨架 */}
      <div className="mb-8">
        <Skeleton className="h-8 w-48" />
      </div>

      {/* 表单骨架 */}
      <div className="space-y-6">
        {/* 输入框骨架 */}
        {Array.from({ length: 4 }).map((_, i) => (
          <div key={i} className="space-y-2">
            <Skeleton className="h-4 w-24" />
            <Skeleton className="h-10 w-full" />
          </div>
        ))}

        {/* 文本区域骨架 */}
        <div className="space-y-2">
          <Skeleton className="h-4 w-24" />
          <Skeleton className="h-32 w-full" />
        </div>

        {/* 选择框骨架 */}
        <div className="space-y-2">
          <Skeleton className="h-4 w-24" />
          <Skeleton className="h-10 w-full" />
        </div>

        {/* 复选框骨架 */}
        <div className="flex items-center space-x-2">
          <Skeleton className="h-5 w-5" />
          <Skeleton className="h-4 w-24" />
        </div>

        {/* 提交按钮骨架 */}
        <Skeleton className="h-10 w-full max-w-xs" />
      </div>

      {/* Sketch 风格装饰 */}
      <div className="pointer-events-none absolute inset-0">
        <div className="absolute inset-0 bg-gradient-to-t from-background/10 to-background/5 opacity-0 transition-opacity group-hover:opacity-100" />

        <div className="absolute -inset-px rounded-lg border border-foreground/10" />

        <div className="absolute -inset-[2px] rounded-lg border border-foreground/5 opacity-0 transition-opacity group-hover:opacity-100" />
      </div>
    </div>
  );
}

================
File: src/components/skeleton/table.tsx
================
import { Skeleton } from "@/components/ui/skeleton";

export function SkeletonTable() {
  return (
    <div className="container mx-auto p-8 animate-in fade-in-50">
      {/* 页面标题骨架 */}
      <div className="mb-8 flex items-center justify-between">
        <Skeleton className="h-8 w-48" />
        <Skeleton className="h-10 w-32" />
      </div>

      {/* 卡片列表骨架 */}
      <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
        {Array.from({ length: 6 }).map((_, i) => (
          <div
            key={i}
            className="group relative overflow-hidden rounded-lg border bg-background p-2"
          >
            {/* 卡片图片骨架 */}
            <Skeleton className="aspect-video w-full rounded-md" />

            {/* 卡片内容骨架 */}
            <div className="space-y-4 p-4">
              <div className="space-y-2">
                <Skeleton className="h-5 w-3/4" />
                <Skeleton className="h-4 w-1/2" />
              </div>

              {/* 标签骨架 */}
              <div className="flex flex-wrap gap-2">
                <Skeleton className="h-6 w-16 rounded-full" />

                <Skeleton className="h-6 w-20 rounded-full" />

                <Skeleton className="h-6 w-14 rounded-full" />
              </div>

              {/* 描述骨架 */}
              <div className="space-y-2">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-5/6" />
                <Skeleton className="h-4 w-4/6" />
              </div>

              {/* 底部信息骨架 */}
              <div className="flex items-center justify-between pt-2">
                <Skeleton className="h-5 w-24" />
                <Skeleton className="h-8 w-8 rounded-full" />
              </div>
            </div>

            {/* Sketch 风格装饰 */}
            <div className="pointer-events-none absolute inset-0">
              <div className="absolute inset-0 bg-gradient-to-t from-background/10 to-background/5 opacity-0 transition-opacity group-hover:opacity-100" />

              <div className="absolute -inset-px rounded-lg border border-foreground/10" />

              <div className="absolute -inset-[2px] rounded-lg border border-foreground/5 opacity-0 transition-opacity group-hover:opacity-100" />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: src/components/theme-provider.tsx
================
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

================
File: src/components/theme-toggle.tsx
================
"use client";

import { useTheme } from "next-themes";
import { Button } from "./ui/button";
import { Sun, MoonStar } from "lucide-react";

export function ThemeToggle() {
  const { setTheme, theme } = useTheme();
  return (
    <>
      <Button
        variant="ghost"
        className="h-9 w-9 px-0"
        onClick={() => {
          setTheme(theme === "dark" ? "light" : "dark");
        }}
      >
        {theme === "dark" ? <Sun /> : <MoonStar />}
      </Button>
    </>
  );
}

================
File: src/components/user-bar.tsx
================
import * as React from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn } from "@/lib/utils";

interface UserBarProps {
  email: string;
  username: string;
  avatarUrl?: string;
  className?: string;
}

const UserBar = React.forwardRef<HTMLDivElement, UserBarProps>(
  ({ email, username, avatarUrl, className }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "flex cursor-pointer items-center space-x-4 rounded-lg bg-background p-2 shadow",
          "hover:bg-muted",
          className
        )}
      >
        <Avatar className="h-10 w-10">
          <AvatarImage src={avatarUrl} alt={username} />
          <AvatarFallback>{username.charAt(0)}</AvatarFallback>
        </Avatar>
        <div className="flex flex-col">
          <span className="text-sm font-medium text-foreground">
            {username}
          </span>
          <div className="text-xs text-muted-foreground">{email}</div>
        </div>
      </div>
    );
  }
);

UserBar.displayName = "UserBar";

export { UserBar };

================
File: src/hooks/use-mobile.tsx
================
import * as React from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(
    undefined
  );

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}

================
File: src/hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/instrumentation.ts
================
export async function register() {
  if (process.env.NEXT_RUNTIME === "nodejs") {
    await import("@/service/admin.service").then(({ AdminService }) => {
      return AdminService.createDefaultAdmin();
    });

    await import("pino");
  }

  if (process.env.NEXT_RUNTIME === "edge") {
  }
}

================
File: src/lib/auth.base.ts
================
import { ADMIN_ROLE } from "@/service/enum/ADMIN_ROLE";
import NextAuth, { DefaultSession, NextAuthConfig } from "next-auth";
declare module "next-auth" {
  interface Session {
    user: {
      username: string;
      role: string;
      nickname: string;
    } & DefaultSession["user"];
  }
}

export const authOptions: NextAuthConfig = {
  pages: {
    signIn: "/login",
  },
  session: {
    strategy: "jwt",
  },
  providers: [],
  callbacks: {
    async session({ token, session }) {
      if (token && session.user) {
        session.user.id = token.id as string;
        session.user.name = token.name as string;
        session.user.username = token.username as string;
        session.user.nickname = token.nickname as string;
        session.user.role = token.role as string;
        session.user.email = token.email as string;
      }
      return session;
    },
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.name = user.name;
        token.email = user.email;
        if ("username" in user && typeof user.username === "string") {
          token.username = user.username;
        }
        if ("nickname" in user && typeof user.nickname === "string") {
          token.nickname = user.nickname;
        }
        if ("type" in user && typeof user.type === "string") {
          token.role = user.type;
        }
      }
      return token;
    },
  },
};
export const { auth } = NextAuth(authOptions);

================
File: src/lib/auth.ts
================
import CredentialsProvider from "next-auth/providers/credentials";
import { authOptions } from "@/lib/auth.base";
import NextAuth, { NextAuthConfig } from "next-auth";
import { AdminService } from "@/service/admin.service";
export const providers: NextAuthConfig["providers"] = [
  CredentialsProvider({
    name: "Credentials",
    credentials: {
      email: { label: "账号", type: "email" },
      password: { label: "密码", type: "password" },
    },
    async authorize(credentials) {
      try {
        const user = await AdminService.login(
          credentials.email as string,
          credentials.password as string
        );
        return user;
      } catch (_error) {
        return null;
      }
    },
  }),
];
export const { handlers, signIn, signOut, auth } = NextAuth({
  ...authOptions,
  providers: [...authOptions.providers, ...providers],
});

================
File: src/lib/cache.ts
================
export interface Cache<T> {
  get(key: string): Promise<T | undefined>;
  set(key: string, value: T, ttl?: number): Promise<void>;
  delete(key: string): Promise<void>;
  update(key: string, partialValue: Partial<T>, ttl?: number): Promise<void>;
  clear(): Promise<void>;
}

export class MemoryCache<T> implements Cache<T> {
  private cache: Map<string, { value: T; expiry: number | null }> = new Map();

  async get(key: string): Promise<T | undefined> {
    const item = this.cache.get(key);
    if (!item) return undefined;
    if (item.expiry !== null && item.expiry < Date.now()) {
      await this.delete(key);
      return undefined;
    }
    return item.value;
  }
  async set(key: string, value: T, ttl?: number): Promise<void> {
    const expiry = ttl ? Date.now() + ttl * 1000 : null;
    this.cache.set(key, { value, expiry });
  }

  async update(
    key: string,
    partialValue: Partial<T>,
    ttl?: number
  ): Promise<void> {
    const existingItem = this.cache.get(key);
    if (!existingItem) {
      throw new Error("Item not found in cache");
    }
    const updatedValue = { ...existingItem.value, ...partialValue };
    const expiry = ttl ? Date.now() + ttl * 1000 : existingItem.expiry;
    this.cache.set(key, { value: updatedValue, expiry });
  }

  async delete(key: string): Promise<void> {
    this.cache.delete(key);
  }

  async clear(): Promise<void> {
    this.cache.clear();
  }
}

================
File: src/lib/db.ts
================
import { Prisma, PrismaClient } from "@prisma/client";

function createPrisma() {
  return new PrismaClient().$extends({
    model: {
      $allModels: {
        async exists<T>(
          this: T,
          where: Prisma.Args<T, "findFirst">["where"]
        ): Promise<boolean> {
          const context = Prisma.getExtensionContext(this);
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const result = await (context as any).findFirst({ where });
          return result !== null;
        },
      },
    },
  });
}

declare global {
  // eslint-disable-next-line no-var
  var cachedPrisma: ReturnType<typeof createPrisma>;
}

let prisma: ReturnType<typeof createPrisma>;
if (process.env.NODE_ENV === "production") {
  prisma = createPrisma();
} else {
  if (!global.cachedPrisma) {
    global.cachedPrisma = createPrisma();
  }
  prisma = global.cachedPrisma;
}

export const db = prisma;

================
File: src/lib/upload.ts
================
export async function uploadImage(file: File): Promise<string> {
  // 这里实现实际的图片上传逻辑
  // 返回上传后的图片URL
  return new Promise((resolve) => {
    const reader = new FileReader()
    reader.onloadend = () => {
      // 临时使用 Base64 作为图片URL
      // 实际项目中应该上传到对象存储服务
      resolve(reader.result as string)
    }
    reader.readAsDataURL(file)
  })
}

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
export function formatDuration(ms: number): string {
  const hours = Math.floor(ms / (1000 * 60 * 60));
  return `${hours.toLocaleString()}小时`;
}

export function formatDate(date: Date): string {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}

// 格式化成 YYYY-MM-DD HH:MM
export function formatDateTime(date: Date): string {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  const hours = String(date.getHours()).padStart(2, "0");
  const minutes = String(date.getMinutes()).padStart(2, "0");
  return `${year}-${month}-${day} ${hours}:${minutes}`;
}

export function getGreeting(): string {
  const hour = new Date().getHours();
  if (hour < 6) return "深夜好";
  if (hour < 9) return "早上好";
  if (hour < 12) return "上午好";
  if (hour < 14) return "中午好";
  if (hour < 17) return "下午好";
  if (hour < 19) return "傍晚好";
  if (hour < 22) return "晚上好";
  return "深夜好";
}

================
File: src/lib/validations/auth.ts
================
import * as z from "zod";

export const loginSchema = z.object({
  email: z.string().email("请输入有效的邮箱地址"),
  password: z.string().min(3, "密码至少3个字符"),
});

export const registerSchema = z.object({
  email: z.string().email("请输入有效的邮箱地址"),
  password: z.string().min(6, "密码至少6个字符"),
  nickname: z.string().min(2, "昵称至少2个字符"),
});

================
File: src/lib/validations/device.ts
================
import * as z from 'zod'

export const deviceSchema = z.object({
  serialNumber: z.string().min(1, '请输入设备序列号'),
  alias: z.string().min(1, '请输入设备别名')
})

================
File: src/middleware.ts
================
import { auth } from "./lib/auth.base";
import { ADMIN_ROLE } from "./service/enum/ADMIN_ROLE";

export default auth((req) => {
  const user = req.auth?.user;
  const isAdmin =
    user?.role === ADMIN_ROLE.ADMIN || user?.role === ADMIN_ROLE.SUPERADMIN;
  if (!isAdmin && req.nextUrl.pathname !== "/login") {
    const newUrl = new URL("/login", req.nextUrl.origin);
    return Response.redirect(newUrl);
  }
});

export const config = {
  matcher: [
    "/admins/:path*",
  ],
};

================
File: src/service/admin.service.ts
================
import { db } from "@/lib/db";
import { compare, hash } from "bcrypt";
import { ADMIN_ROLE } from "./enum/ADMIN_ROLE";
import { Admin } from "@prisma/client";

export class AdminService {
  // 创建管理员
  static async createAdmin(
    email: string,
    username: string,
    password: string,
    data?: {
      nickname?: string;
      phone?: string;
      type?: ADMIN_ROLE;
    }
  ) {
    const exists = await db.admin.findUnique({
      where: { email },
    });

    if (exists) {
      throw new Error("邮箱已被注册");
    }

    const hashedPassword = await hash(password, 10);

    return db.admin.create({
      data: {
        email,
        username,
        password: hashedPassword,
        ...data,
      },
    });
  }

  // 获得管理员
  static async getAdmin(adminId: string) {
    return db.admin.findUnique({
      where: { id: adminId },
    });
  }

  // 获取管理员列表
  static async getAdmins(
    query: PageableQuery<typeof db.admin> = { page: 1, pageSize: 10 }
  ) {
    const skip = (query.page - 1) * query.pageSize;
    const [total, data] = await Promise.all([
      db.admin.count({ where: query.where }),
      db.admin.findMany({
        skip,
        take: query.pageSize,
        orderBy: {
          createdAt: "desc",
        },
        where: query.where,
      }),
    ]);

    return {
      data,
      total,
      page: query.page,
      pageSize: query.pageSize,
      totalPages: Math.ceil(total / query.pageSize),
    };
  }

  // 更新管理员信息
  static async updateAdmin(
    adminId: string,
    data: {
      email?: string;
      password?: string;
      nickname?: string;
      phone?: string;
      role?: ADMIN_ROLE;
    }
  ) {
    const { password, ...rest } = data;
    const updateData: Partial<Admin> = { ...rest };

    if (password) {
      updateData.password = await hash(password, 10);
    }

    return db.admin.update({
      where: {
        id: adminId,
      },
      data: updateData,
    });
  }

  // 删除管理员
  static async deleteAdmin(adminId: string) {
    return db.admin.delete({
      where: {
        id: adminId,
      },
    });
  }
  /**
   *
   * @param account 登录账号或者邮箱
   * @param password
   * @returns
   */
  static async login(account: string, password: string) {
    const admin = await db.admin.findFirst({
      where: {
        OR: [{ email: account }, { username: account }],
      },
    });

    if (!admin) {
      throw new Error("账号或者密码错误");
    }

    const isValid = await compare(password, admin.password);

    if (!isValid) {
      throw new Error("账号或者密码错误");
    }

    return {
      id: admin.id,
      email: admin.email,
      username: admin.username,
      nickname: admin.nickname,
      name: admin.nickname,
      phone: admin.phone,
    };
  }

  // 修改密码
  static async changePassword(
    adminId: string,
    oldPassword: string,
    newPassword: string
  ) {
    const admin = await db.admin.findUnique({
      where: { id: adminId },
    });

    if (!admin) {
      throw new Error("管理员不存在");
    }

    const isValid = await compare(oldPassword, admin.password);

    if (!isValid) {
      throw new Error("原密码错误");
    }

    const hashedPassword = await hash(newPassword, 10);

    return db.admin.update({
      where: { id: adminId },
      data: { password: hashedPassword },
    });
  }

  // 修改昵称
  static async changeNickname(adminId: string, newNickname: string) {
    const admin = await db.admin.findUnique({
      where: { id: adminId },
    });

    if (!admin) {
      throw new Error("管理员不存在");
    }

    return db.admin.update({
      where: { id: adminId },
      data: { nickname: newNickname },
    });
  }

  static async createDefaultAdmin() {
    const exists = await db.admin.findUnique({
      where: { email: "admin@admin.com" },
    });
    if (exists) return;
    await db.admin.create({
      data: {
        email: "admin@admin.com",
        username: "admin",
        nickname: "admin",
        phone: "admin",
        type: ADMIN_ROLE.SUPERADMIN,
        password: await hash("admin", 10),
      },
    });
    console.log("默认管理员已创建,账号：admin@admin.com，密码：admin");
  }
}

================
File: src/service/api-endpoints.service.ts
================
import { db } from "@/lib/db";
import { CozeWebhook } from "./coze-webhook";

export class ApiEndpointsService {
  /**
   * Retrieves an API endpoint by its ID
   * @param {string} id - The unique identifier of the API endpoint
   * @returns {Promise<Object>} A promise that resolves to an object containing the API endpoint data and its path
   * @throws {Error} If the API endpoint is not found
   */
  static async getApiendpoint(id: string) {
    const apiEndpoint = await db.apiEndpoint.findUnique({
      where: { id },
      include: {
        cozeWebhook: true,
      },
    });

    if (!apiEndpoint) {
      throw new Error("API endpoint not found");
    }

    const path =
      apiEndpoint.type === "openaiLike"
        ? "/api/v1/chat/completion"
        : `/api/${apiEndpoint.id}`;

    return {
      ...apiEndpoint,
      path,
    };
  }

  /**
   * 获得coze的操作
   * @param apiKey
   * @param id
   * @returns
   */
  static async getClient(apiKey: string, id: string) {
    const apiKeys = await db.apiKey.findFirst({
      where: {
        key: apiKey,
        apiEndpoints: {
          some: {
            id,
          },
        },
      },
      include: {
        apiEndpoints: {
          include: {
            cozeWebhook: true,
          },
        },
      },
    });

    if (!apiKeys) {
      throw new Error("API key not found");
    }
    const apiEndpoint = apiKeys.apiEndpoints.find((item) => item.id === id);

    if (!apiEndpoint) {
      throw new Error("API endpoint not found");
    }
    const coze = new CozeWebhook(apiEndpoint.cozeWebhook);

    return {
      coze,
      /**
       * 发送
       * @param data
       * @returns
       */
      send: (data: Record<string, string>) => {
        return coze.send(apiEndpoint.id, apiKey, data);
      },
    };
  }
}

================
File: src/service/coze-webhook.ts
================
import { MemoryCache } from "@/lib/cache";
import { db } from "@/lib/db";
import { v4 as uuidv4 } from "uuid";
type CozeCache = {
  logId: string;
  start: number;
  data?: string;
  status: "success" | "wait";
};
declare global {
  // eslint-disable-next-line no-var
  var WebhookCache: MemoryCache<CozeCache>;
}

let WebhookCache: MemoryCache<CozeCache>;
if (process.env.NODE_ENV === "production") {
  WebhookCache = new MemoryCache<CozeCache>();
} else {
  if (!global.WebhookCache) {
    global.WebhookCache = new MemoryCache<CozeCache>();
  }
  WebhookCache = global.WebhookCache;
}

export class CozeWebhookService {
  static async getClient(id: string) {
    const webhook = await db.cozeWebhook.findUnique({
      where: {
        id,
      },
    });

    if (!webhook) {
      throw new CozeWebhookError("webhook not found");
    }

    return new CozeWebhook({
      url: webhook.url,
      id: webhook.id,
      authorization: webhook.authorization,
    });
  }
}

class CozeWebhookError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "CozeWebhookError";
  }
}

export class CozeWebhook {
  url: string;
  authorization: string;
  id: string;
  callback: string;
  constructor({
    url,
    id,
    authorization,
    callback,
  }: {
    url: string;
    id: string;
    authorization: string;
    callback?: string;
  }) {
    this.id = id;
    this.url = url;
    this.authorization = authorization;
    this.callback =
      callback ?? `${process.env.NEXT_PUBLIC_API_URL}/webhook/${id}`;
  }

  //   转发给coze
  async send(
    apiEndpointId: string,
    apiKey: string,
    data: Record<string, string>
  ) {
    const hookId = uuidv4();
    const log = await db.apiEndpointLog.create({
      data: {
        apiEndpointId: apiEndpointId,
        cozeWebhookId: this.id,
        requestParams: JSON.stringify(data),
        apiKey: apiKey,
      },
    });
    const response = await fetch(this.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.authorization}`,
      },
      body: JSON.stringify({
        ...data,
        hookId,
        callback: this.callback,
      }),
    });
    const result = (await response.json()) as {
      code: number;
      message: string;
    };
    if (result.code != 0) {
      throw new CozeWebhookError(result.message);
    }

    await WebhookCache.set(hookId, {
      logId: log.id,
      start: Date.now(),
      status: "success",
    });

    return {
      hookId,
      data: result,
    };
  }

  async query(hookId: string) {
    const hook = WebhookCache.get(hookId);
    if (!hook) {
      throw new CozeWebhookError("hook not found");
    }
    return hook;
  }

  async complte(hookId: string, data: string) {
    const hook = await WebhookCache.get(hookId);
    if (!hook) {
      throw new CozeWebhookError("hook not found");
    }

    await db.apiEndpointLog.update({
      data: {
        duration: Date.now() - hook.start,
        response: data,
      },
      where: {
        id: hook.logId,
      },
    });

    await WebhookCache.update(
      hookId,
      {
        data,
        status: "success",
      },
      60 * 1000
    );
    return {
      hookId,
      data,
    };
  }
}

================
File: src/service/enum/ADMIN_ROLE.ts
================
export enum ADMIN_ROLE {
  ADMIN = "admin",
  SUPERADMIN = "superadmin",
}

export const ADMIN_ROLE_NAME: Record<ADMIN_ROLE, string> = {
  [ADMIN_ROLE.ADMIN]: "管理员",
  [ADMIN_ROLE.SUPERADMIN]: "超级管理员",
};

================
File: src/service/menu.service.ts
================
import { db } from "@/lib/db";

export class MenuService {
  // 创建菜单
  static async createMenu(
    name: string,
    url: string,
    sort: number,
    parentId?: string | null,
    icon?: string | null,
    permissionIds?: string[]
  ) {
    return db.menu.create({
      data: {
        name,
        url,
        sort,
        parentId,
        icon,
        permissions: {
          connect: permissionIds?.map((id) => ({ id })) || [],
        },
      },
    });
  }

  // getMenuById
  static async getMenuById(id: string) {
    return db.menu.findUnique({
      where: { id },
    });
  }

  // 获取单个菜单
  static async getMenu(menuId: string) {
    return db.menu.findUnique({
      where: { id: menuId },
      include: {
        permissions: true,
      },
    });
  }

  // list
  static async list() {
    return db.menu.findMany({
      orderBy: {
        sort: "asc",
      },
    });
  }

  // 获取菜单列表
  static async getMenus(
    query: PageableQuery<typeof db.menu> = { page: 1, pageSize: 10 }
  ) {
    const skip = (query.page - 1) * query.pageSize;
    const [total, data] = await Promise.all([
      db.menu.count({ where: query.where }),
      db.menu.findMany({
        skip,
        take: query.pageSize,
        orderBy: {
          sort: "asc",
        },
        where: query.where,
        include: {
          permissions: true,
        },
      }),
    ]);

    return {
      data,
      total,
      page: query.page,
      pageSize: query.pageSize,
      totalPages: Math.ceil(total / query.pageSize),
    };
  }

  // 更新菜单信息
  static async updateMenu(
    menuId: string,
    data: {
      name?: string;
      url?: string;
      sort?: number;
      parentId?: string | null;
      icon?: string | null;
      permissionIds?: string[];
    }
  ) {
    return db.menu.update({
      where: {
        id: menuId,
      },
      data: {
        ...data,
        permissions: {
          set: data.permissionIds?.map((id) => ({ id })) || [],
        },
      },
    });
  }

  // 删除菜单
  static async deleteMenu(menuId: string) {
    return db.menu.delete({
      where: {
        id: menuId,
      },
    });
  }
}

================
File: src/service/permission.service.ts
================
import { db } from "@/lib/db";

export class PermissionService {
  // 创建权限
  static async createPermission(
    name: string,
    key: string,
    description?: string | null,
    parentId?: string | null
  ) {
    const exists = await db.permission.findUnique({
      where: { key },
    });

    if (exists) {
      throw new Error("权限已存在");
    }

    return db.permission.create({
      data: {
        name,
        key,
        description,
        parentId,
      },
    });
  }

  // getPermissionById
  static async getPermissionById(id: string) {
    return db.permission.findUnique({
      where: { id },
    });
  }

  // 获取单个权限
  static async getPermission(permissionId: string) {
    const permission = await db.permission.findUnique({
      where: { id: permissionId },
      include: {
        children: true,
      },
    });
    return permission;
  }

  // list
  static async list() {
    return db.permission.findMany({
      orderBy: {
        createdAt: "desc",
      },
    });
  }

  // 获取权限列表
  static async getPermissions(
    query: PageableQuery<typeof db.permission> = { page: 1, pageSize: 10 }
  ) {
    const skip = (query.page - 1) * query.pageSize;
    const [total, data] = await Promise.all([
      db.permission.count({ where: query.where }),
      db.permission.findMany({
        skip,
        take: query.pageSize,
        orderBy: {
          createdAt: "desc",
        },
        where: query.where,
        include: {
          children: true,
        },
      }),
    ]);

    return {
      data,
      total,
      page: query.page,
      pageSize: query.pageSize,
      totalPages: Math.ceil(total / query.pageSize),
    };
  }

  // 更新权限信息
  static async updatePermission(
    permissionId: string,
    data: {
      name?: string;
      key?: string;
      description?: string | null;
      parentId?: string | null;
    }
  ) {
    const exists = await db.permission.findUnique({
      where: { key: data.key },
    });
    if (exists && exists.id !== permissionId) {
      throw new Error("权限已存在");
    }

    return db.permission.update({
      where: {
        id: permissionId,
      },
      data,
    });
  }

  // 删除权限
  static async deletePermission(permissionId: string) {
    return db.permission.delete({
      where: {
        id: permissionId,
      },
    });
  }
}

================
File: src/service/role.service.ts
================
import { db } from "@/lib/db";

export class RoleService {
  /**
   * 获取角色列表
   */
  static async getRoles(
    { page, pageSize, where }: PageableQuery<typeof db.role> = {
      page: 1,
      pageSize: 10,
    }
  ) {
    const skip = (page - 1) * pageSize;
    const [data, total] = await Promise.all([
      db.role.findMany({
        skip,
        take: pageSize,
        include: {
          admins: true,
          permissions: true,
        },
        orderBy: { createdAt: "desc" },
        where,
      }),
      db.role.count({ where }),
    ]);

    return {
      data,
      total,
      page,
      pageSize,
    };
  }

  // getRoleById
  static async getRoleById(id: string) {
    return db.role.findUnique({ where: { id } });
  }

  /**
   * 创建角色
   */
  static async createRole(data: {
    name: string;
    code: string;
    description?: string;
    permissions?: string[];
  }) {
    return db.role.create({
      data: {
        ...data,
        permissions: {
          connect: data.permissions?.map((permission) => ({ id: permission })),
        },
      },
    });
  }

  /**
   * 更新角色
   */
  static async updateRole(
    id: string,
    data: {
      name?: string;
      description?: string;
      permissions?: string[];
    }
  ) {
    return db.role.update({
      where: { id },
      data: {
        ...data,
        permissions: data.permissions
          ? {
              connect: data.permissions.map((permission) => ({
                id: permission,
              })),
            }
          : undefined,
      },
    });
  }

  /**
   * 删除角色
   */
  static async deleteRole(id: string) {
    return db.role.delete({ where: { id } });
  }
}

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
import tailwindcssAnimate from "tailwindcss-animate";
export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  darkMode: ["class", "class"],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [tailwindcssAnimate],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023", "DOM", "DOM.Iterable"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "src/global.d.ts",
    "**/*.js",
    "**/*.jsx",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
